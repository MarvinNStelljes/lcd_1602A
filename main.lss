
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000caa  00000d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000caa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000120c  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097c  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000619  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00002ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000465  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f2e  00000000  00000000  00003745  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00004673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 37       	cpi	r26, 0x72	; 114
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9b 02 	call	0x536	; 0x536 <main>
  8e:	0c 94 53 06 	jmp	0xca6	; 0xca6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <put_lcd_data>:
	}
	
	
	
void put_lcd_data(uint8_t data)	
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c8 2f       	mov	r28, r24
	LCD_DATA &= ~((1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	8f 70       	andi	r24, 0x0F	; 15
  a4:	8b b9       	out	0x0b, r24	; 11
	
	set_bits(&PORTB, 1, LCD_EN); 
  a6:	1f 92       	push	r1
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	8f 93       	push	r24
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	8f 93       	push	r24
  b0:	1f 92       	push	r1
  b2:	85 e2       	ldi	r24, 0x25	; 37
  b4:	8f 93       	push	r24
  b6:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>

	if ((data & BIT7) != 0)
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	c7 fd       	sbrc	r28, 7
		LCD_DATA |= (1 << LCD_D7);
  c6:	5f 9a       	sbi	0x0b, 7	; 11
	if ((data & BIT6) != 0)
  c8:	c6 fd       	sbrc	r28, 6
		LCD_DATA |= (1 << LCD_D6);
  ca:	5e 9a       	sbi	0x0b, 6	; 11
	if ((data & BIT5) != 0)
  cc:	c5 fd       	sbrc	r28, 5
		LCD_DATA |= (1 << LCD_D5);
  ce:	5d 9a       	sbi	0x0b, 5	; 11
	if ((data & BIT4) != 0)
  d0:	c4 fd       	sbrc	r28, 4
		LCD_DATA |= (1 << LCD_D4);
  d2:	5c 9a       	sbi	0x0b, 4	; 11

	clear_bits(&PORTB, 1, LCD_EN);
  d4:	1f 92       	push	r1
  d6:	04 e0       	ldi	r16, 0x04	; 4
  d8:	0f 93       	push	r16
  da:	11 e0       	ldi	r17, 0x01	; 1
  dc:	1f 93       	push	r17
  de:	1f 92       	push	r1
  e0:	d5 e2       	ldi	r29, 0x25	; 37
  e2:	df 93       	push	r29
  e4:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>

	LCD_DATA &= ~((1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7));
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	8b b9       	out	0x0b, r24	; 11

	set_bits(&PORTB, 1, LCD_EN);     
  ee:	1f 92       	push	r1
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	1f 92       	push	r1
  f6:	df 93       	push	r29
  f8:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>

	if ((data & BIT3) != 0)
  fc:	8d b7       	in	r24, 0x3d	; 61
  fe:	9e b7       	in	r25, 0x3e	; 62
 100:	0a 96       	adiw	r24, 0x0a	; 10
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	9e bf       	out	0x3e, r25	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	8d bf       	out	0x3d, r24	; 61
 10c:	c3 fd       	sbrc	r28, 3
		LCD_DATA |= (1 << LCD_D7);
 10e:	5f 9a       	sbi	0x0b, 7	; 11
	if ((data & BIT2) != 0)
 110:	c2 fd       	sbrc	r28, 2
		LCD_DATA |= (1 << LCD_D6);
 112:	5e 9a       	sbi	0x0b, 6	; 11
	if ((data & BIT1) != 0)
 114:	c1 fd       	sbrc	r28, 1
		LCD_DATA |= (1 << LCD_D5);
 116:	5d 9a       	sbi	0x0b, 5	; 11
	if ((data & BIT0) != 0)
 118:	c0 fd       	sbrc	r28, 0
		LCD_DATA |= (1 << LCD_D4);
 11a:	5c 9a       	sbi	0x0b, 4	; 11

	clear_bits(&PORTB, 1, LCD_EN);
 11c:	1f 92       	push	r1
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	8f 93       	push	r24
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	8f 93       	push	r24
 126:	1f 92       	push	r1
 128:	85 e2       	ldi	r24, 0x25	; 37
 12a:	8f 93       	push	r24
 12c:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
	

	
	
	while(get_lcd_busy_flag() > 0);  //Der ist wichtig!!!
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <get_lcd_busy_flag>
 13e:	18 16       	cp	r1, r24
 140:	19 06       	cpc	r1, r25
 142:	dc f3       	brlt	.-10     	; 0x13a <put_lcd_data+0xa4>
	

		
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <lcd_write>:



	
	void lcd_write(unsigned char character)
	{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	08 2f       	mov	r16, r24
		
		
			 set_bits(&RS_PORT, 1, RS_PIN); 
 158:	1f 92       	push	r1
 15a:	12 e0       	ldi	r17, 0x02	; 2
 15c:	1f 93       	push	r17
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	df 93       	push	r29
 162:	1f 92       	push	r1
 164:	cb e2       	ldi	r28, 0x2B	; 43
 166:	cf 93       	push	r28
 168:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_write+0x22>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_write+0x28>
 176:	00 00       	nop
	
   _delay_ms (1); 
	
	 put_lcd_data(character);
 178:	80 2f       	mov	r24, r16
 17a:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>

	
		
	
		
	clear_bits(&RS_PORT, 1, RS_PIN);
 17e:	1f 92       	push	r1
 180:	1f 93       	push	r17
 182:	df 93       	push	r29
 184:	1f 92       	push	r1
 186:	cf 93       	push	r28
 188:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
	

	//while(get_lcd_busy_flag() > 0);
}
 18c:	8d b7       	in	r24, 0x3d	; 61
 18e:	9e b7       	in	r25, 0x3e	; 62
 190:	0a 96       	adiw	r24, 0x0a	; 10
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	9e bf       	out	0x3e, r25	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	8d bf       	out	0x3d, r24	; 61
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <lcd_write_string>:
	

void lcd_write_string(unsigned char *string)
{
 1a6:	af 92       	push	r10
 1a8:	bf 92       	push	r11
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
	int cnt = 0; 
 1ba:	00 e0       	ldi	r16, 0x00	; 0
 1bc:	10 e0       	ldi	r17, 0x00	; 0
	
	while(*string != 0) {
			
		set_bits(&RS_PORT, 1, RS_PIN); 
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	f8 2e       	mov	r15, r24
 1c2:	ee 24       	eor	r14, r14
 1c4:	e3 94       	inc	r14
 1c6:	9b e2       	ldi	r25, 0x2B	; 43
 1c8:	d9 2e       	mov	r13, r25
 1ca:	5e 01       	movw	r10, r28

void lcd_write_string(unsigned char *string)
{
	int cnt = 0; 
	
	while(*string != 0) {
 1cc:	88 81       	ld	r24, Y
 1ce:	88 23       	and	r24, r24
 1d0:	51 f1       	breq	.+84     	; 0x226 <lcd_write_string+0x80>
			
		set_bits(&RS_PORT, 1, RS_PIN); 
 1d2:	1f 92       	push	r1
 1d4:	ff 92       	push	r15
 1d6:	ef 92       	push	r14
 1d8:	1f 92       	push	r1
 1da:	df 92       	push	r13
 1dc:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>
 1e0:	8f e9       	ldi	r24, 0x9F	; 159
 1e2:	9f e0       	ldi	r25, 0x0F	; 15
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_write_string+0x3e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_write_string+0x44>
 1ea:	00 00       	nop
 1ec:	21 96       	adiw	r28, 0x01	; 1
		
		_delay_ms (1);
		
		put_lcd_data(*string);
 1ee:	f5 01       	movw	r30, r10
 1f0:	80 81       	ld	r24, Z
 1f2:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>
		//while(get_lcd_busy_flag() > 0);	
					
		clear_bits(&RS_PORT, 1, RS_PIN);
 1f6:	1f 92       	push	r1
 1f8:	ff 92       	push	r15
 1fa:	ef 92       	push	r14
 1fc:	1f 92       	push	r1
 1fe:	df 92       	push	r13
 200:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
			
		if (cnt == 15)
 204:	8d b7       	in	r24, 0x3d	; 61
 206:	9e b7       	in	r25, 0x3e	; 62
 208:	0a 96       	adiw	r24, 0x0a	; 10
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	9e bf       	out	0x3e, r25	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	8d bf       	out	0x3d, r24	; 61
 214:	0f 30       	cpi	r16, 0x0F	; 15
 216:	11 05       	cpc	r17, r1
 218:	19 f4       	brne	.+6      	; 0x220 <lcd_write_string+0x7a>
		{
			//carriage return
		
		put_lcd_data(LCD_CARRIAGE_RETURN);
 21a:	80 ec       	ldi	r24, 0xC0	; 192
 21c:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>
		//while(get_lcd_busy_flag() > 0);
		}
	//_delay_ms (150);
		string++;
		cnt++;
 220:	0f 5f       	subi	r16, 0xFF	; 255
 222:	1f 4f       	sbci	r17, 0xFF	; 255
 224:	d2 cf       	rjmp	.-92     	; 0x1ca <lcd_write_string+0x24>
		
		
		}
	}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	bf 90       	pop	r11
 236:	af 90       	pop	r10
 238:	08 95       	ret

0000023a <put_lcd_nibble>:

		
}

void put_lcd_nibble(uint8_t data)	
{
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
	set_bits(&PORTB, 1, LCD_EN); 
 23e:	1f 92       	push	r1
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	8f 93       	push	r24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	8f 93       	push	r24
 248:	1f 92       	push	r1
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	8f 93       	push	r24
 24e:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	81 ee       	ldi	r24, 0xE1	; 225
 256:	94 e0       	ldi	r25, 0x04	; 4
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <put_lcd_nibble+0x1e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <put_lcd_nibble+0x28>
 262:	00 00       	nop
   _delay_ms (100);
	LCD_DATA &= ~((1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	8b b9       	out	0x0b, r24	; 11
	
	if ((data & BIT3) != 0)
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	c3 fd       	sbrc	r28, 3
		LCD_DATA |= (1 << LCD_D7);
 276:	5f 9a       	sbi	0x0b, 7	; 11
	if ((data & BIT2) != 0)
 278:	c2 fd       	sbrc	r28, 2
		LCD_DATA |= (1 << LCD_D6);
 27a:	5e 9a       	sbi	0x0b, 6	; 11
	if ((data & BIT1) != 0)
 27c:	c1 fd       	sbrc	r28, 1
		LCD_DATA |= (1 << LCD_D5);
 27e:	5d 9a       	sbi	0x0b, 5	; 11
	if ((data & BIT0) != 0)
 280:	c0 fd       	sbrc	r28, 0
		LCD_DATA |= (1 << LCD_D4);
 282:	5c 9a       	sbi	0x0b, 4	; 11
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	81 ee       	ldi	r24, 0xE1	; 225
 288:	94 e0       	ldi	r25, 0x04	; 4
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <put_lcd_nibble+0x50>
 292:	00 c0       	rjmp	.+0      	; 0x294 <put_lcd_nibble+0x5a>
 294:	00 00       	nop
	_delay_ms (100);
	clear_bits(&PORTB, 1, LCD_EN);
 296:	1f 92       	push	r1
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	8f 93       	push	r24
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	8f 93       	push	r24
 2a0:	1f 92       	push	r1
 2a2:	85 e2       	ldi	r24, 0x25	; 37
 2a4:	8f 93       	push	r24
 2a6:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
}	
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <debug_pin>:



void   debug_pin(uint8_t bit)                                                                        
{
		PORTB |= (1 << bit);
 2b8:	45 b1       	in	r20, 0x05	; 5
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <debug_pin+0xe>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	8a 95       	dec	r24
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <debug_pin+0xa>
 2ca:	cb 01       	movw	r24, r22
 2cc:	46 2b       	or	r20, r22
 2ce:	45 b9       	out	0x05, r20	; 5
 2d0:	7f ef       	ldi	r23, 0xFF	; 255
 2d2:	23 ed       	ldi	r18, 0xD3	; 211
 2d4:	30 e3       	ldi	r19, 0x30	; 48
 2d6:	71 50       	subi	r23, 0x01	; 1
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	30 40       	sbci	r19, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <debug_pin+0x1e>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <debug_pin+0x28>
 2e0:	00 00       	nop
		_delay_ms (1000);
		PORTB &= ~(1 << bit);
 2e2:	95 b1       	in	r25, 0x05	; 5
 2e4:	80 95       	com	r24
 2e6:	89 23       	and	r24, r25
 2e8:	85 b9       	out	0x05, r24	; 5
 2ea:	4f ef       	ldi	r20, 0xFF	; 255
 2ec:	63 ed       	ldi	r22, 0xD3	; 211
 2ee:	70 e3       	ldi	r23, 0x30	; 48
 2f0:	41 50       	subi	r20, 0x01	; 1
 2f2:	60 40       	sbci	r22, 0x00	; 0
 2f4:	70 40       	sbci	r23, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <debug_pin+0x38>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <debug_pin+0x42>
 2fa:	00 00       	nop
 2fc:	08 95       	ret

000002fe <get_lcd_busy_flag>:
#include <stdlib.h>
#include <stdint.h>
#include <stdarg.h>

int get_lcd_busy_flag(void)
{
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
	// TODO: add address counter

	uint8_t input_buffer = 0;
	
	DDRD &= ~( (1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));	// Set LCD Port Pins as Input
 306:	8a b1       	in	r24, 0x0a	; 10
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	8a b9       	out	0x0a, r24	; 10
		
	clear_bits(&RS_PORT, 1, RS_PIN);
 30c:	1f 92       	push	r1
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	8f 93       	push	r24
 312:	c1 e0       	ldi	r28, 0x01	; 1
 314:	cf 93       	push	r28
 316:	1f 92       	push	r1
 318:	db e2       	ldi	r29, 0x2B	; 43
 31a:	df 93       	push	r29
 31c:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
	set_bits(&RW_PORT, 1, RW_PIN); 
 320:	1f 92       	push	r1
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	8f 93       	push	r24
 326:	cf 93       	push	r28
 328:	1f 92       	push	r1
 32a:	df 93       	push	r29
 32c:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>
 330:	8f e9       	ldi	r24, 0x9F	; 159
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <get_lcd_busy_flag+0x36>
 338:	00 c0       	rjmp	.+0      	; 0x33a <get_lcd_busy_flag+0x3c>
 33a:	00 00       	nop
	_delay_ms (1);
	set_bits(&PORTB, 1, LCD_EN);
 33c:	1f 92       	push	r1
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	8f 93       	push	r24
 342:	cf 93       	push	r28
 344:	1f 92       	push	r1
 346:	85 e2       	ldi	r24, 0x25	; 37
 348:	8f 93       	push	r24
 34a:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>
 34e:	8f e9       	ldi	r24, 0x9F	; 159
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <get_lcd_busy_flag+0x54>
 356:	00 c0       	rjmp	.+0      	; 0x358 <get_lcd_busy_flag+0x5a>
 358:	00 00       	nop
	_delay_ms (1);
		
	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
 35a:	2d b7       	in	r18, 0x3d	; 61
 35c:	3e b7       	in	r19, 0x3e	; 62
 35e:	21 5f       	subi	r18, 0xF1	; 241
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	3e bf       	out	0x3e, r19	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	2d bf       	out	0x3d, r18	; 61
 36c:	4f 9b       	sbis	0x09, 7	; 9
 36e:	02 c0       	rjmp	.+4      	; 0x374 <get_lcd_busy_flag+0x76>
		input_buffer |= (1 << 7);
 370:	c0 e8       	ldi	r28, 0x80	; 128
 372:	01 c0       	rjmp	.+2      	; 0x376 <get_lcd_busy_flag+0x78>

int get_lcd_busy_flag(void)
{
	// TODO: add address counter

	uint8_t input_buffer = 0;
 374:	c0 e0       	ldi	r28, 0x00	; 0
	set_bits(&PORTB, 1, LCD_EN);
	_delay_ms (1);
		
	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
		input_buffer |= (1 << 7);
	if ((LCD_DATA_IN & (1 << LCD_D6)) != 0)
 376:	4e 99       	sbic	0x09, 6	; 9
		input_buffer |= (1 << 6);
 378:	c0 64       	ori	r28, 0x40	; 64
	if ((LCD_DATA_IN & (1 << LCD_D5)) != 0)
 37a:	4d 99       	sbic	0x09, 5	; 9
		input_buffer |= (1 << 5);
 37c:	c0 62       	ori	r28, 0x20	; 32
	if ((LCD_DATA_IN & (1 << LCD_D4)) != 0)
 37e:	4c 99       	sbic	0x09, 4	; 9
		input_buffer |= (1 << 4);
 380:	c0 61       	ori	r28, 0x10	; 16
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <get_lcd_busy_flag+0x88>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <get_lcd_busy_flag+0x8e>
 38c:	00 00       	nop
		
		_delay_ms (1);
	clear_bits(&PORTB, 1, LCD_EN);
 38e:	1f 92       	push	r1
 390:	04 e0       	ldi	r16, 0x04	; 4
 392:	0f 93       	push	r16
 394:	11 e0       	ldi	r17, 0x01	; 1
 396:	1f 93       	push	r17
 398:	1f 92       	push	r1
 39a:	d5 e2       	ldi	r29, 0x25	; 37
 39c:	df 93       	push	r29
 39e:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
 3a2:	8f e9       	ldi	r24, 0x9F	; 159
 3a4:	9f e0       	ldi	r25, 0x0F	; 15
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <get_lcd_busy_flag+0xa8>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <get_lcd_busy_flag+0xae>
 3ac:	00 00       	nop
   _delay_ms (1);
	set_bits(&PORTB, 1, LCD_EN);
 3ae:	1f 92       	push	r1
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	1f 92       	push	r1
 3b6:	df 93       	push	r29
 3b8:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	9f e0       	ldi	r25, 0x0F	; 15
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <get_lcd_busy_flag+0xc2>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <get_lcd_busy_flag+0xc8>
 3c6:	00 00       	nop
	_delay_ms (1);
	
	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
 3c8:	2d b7       	in	r18, 0x3d	; 61
 3ca:	3e b7       	in	r19, 0x3e	; 62
 3cc:	26 5f       	subi	r18, 0xF6	; 246
 3ce:	3f 4f       	sbci	r19, 0xFF	; 255
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	3e bf       	out	0x3e, r19	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	2d bf       	out	0x3d, r18	; 61
 3da:	4f 99       	sbic	0x09, 7	; 9
		input_buffer |= (1 << 3);
 3dc:	c8 60       	ori	r28, 0x08	; 8
	if ((LCD_DATA_IN & (1 << LCD_D6)) != 0)
 3de:	4e 99       	sbic	0x09, 6	; 9
		input_buffer |= (1 << 2);
 3e0:	c4 60       	ori	r28, 0x04	; 4
	if ((LCD_DATA_IN & (1 << LCD_D5)) != 0)
 3e2:	4d 99       	sbic	0x09, 5	; 9
		input_buffer |= (1 << 1);
 3e4:	c2 60       	ori	r28, 0x02	; 2
	if ((LCD_DATA_IN & (1 << LCD_D4)) != 0)
 3e6:	4c 99       	sbic	0x09, 4	; 9
		input_buffer |= (1 << 0);
 3e8:	c1 60       	ori	r28, 0x01	; 1
	
	clear_bits(&PORTB, 1, LCD_EN);
 3ea:	1f 92       	push	r1
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	8f 93       	push	r24
 3f0:	d1 e0       	ldi	r29, 0x01	; 1
 3f2:	df 93       	push	r29
 3f4:	1f 92       	push	r1
 3f6:	85 e2       	ldi	r24, 0x25	; 37
 3f8:	8f 93       	push	r24
 3fa:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
	
	clear_bits(&RW_PORT, 1, RW_PIN);
 3fe:	1f 92       	push	r1
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	8f 93       	push	r24
 404:	df 93       	push	r29
 406:	1f 92       	push	r1
 408:	8b e2       	ldi	r24, 0x2B	; 43
 40a:	8f 93       	push	r24
 40c:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
	
	DDRD |= ((1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));	// Set LCD Port Pins as Output
 410:	8a b1       	in	r24, 0x0a	; 10
 412:	80 6f       	ori	r24, 0xF0	; 240
 414:	8a b9       	out	0x0a, r24	; 10


	return ( input_buffer & 0b10000000);
 416:	8c 2f       	mov	r24, r28
 418:	80 78       	andi	r24, 0x80	; 128
 41a:	2d b7       	in	r18, 0x3d	; 61
 41c:	3e b7       	in	r19, 0x3e	; 62
 41e:	26 5f       	subi	r18, 0xF6	; 246
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	3e bf       	out	0x3e, r19	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	2d bf       	out	0x3d, r18	; 61
}
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <toggle_LCD_EN>:

/////-----void toggle_LCD_EN(void)-----/////
/*Toggle the LCD enable pin to transmit or receive data. The data to tranceive have to be set on output before toggle the LCD enable pin. */

void toggle_LCD_EN(void)
{
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
	set_bits(&LCD_EN_PORT, 1, LCD_EN);
 43e:	1f 92       	push	r1
 440:	14 e0       	ldi	r17, 0x04	; 4
 442:	1f 93       	push	r17
 444:	d1 e0       	ldi	r29, 0x01	; 1
 446:	df 93       	push	r29
 448:	1f 92       	push	r1
 44a:	c5 e2       	ldi	r28, 0x25	; 37
 44c:	cf 93       	push	r28
 44e:	0e 94 42 02 	call	0x484	; 0x484 <set_bits>
 452:	8f e9       	ldi	r24, 0x9F	; 159
 454:	9f e0       	ldi	r25, 0x0F	; 15
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <toggle_LCD_EN+0x1e>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <toggle_LCD_EN+0x24>
 45c:	00 00       	nop
	_delay_ms (1);
	clear_bits(&LCD_EN_PORT, 1, LCD_EN);
 45e:	1f 92       	push	r1
 460:	1f 93       	push	r17
 462:	df 93       	push	r29
 464:	1f 92       	push	r1
 466:	cf 93       	push	r28
 468:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
}
 46c:	8d b7       	in	r24, 0x3d	; 61
 46e:	9e b7       	in	r25, 0x3e	; 62
 470:	0a 96       	adiw	r24, 0x0a	; 10
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	9e bf       	out	0x3e, r25	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	8d bf       	out	0x3d, r24	; 61
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	08 95       	ret

00000484 <set_bits>:
#include "atmel_io_control.h"
#include <stdarg.h>


void set_bits(uint8_t *reg, unsigned char num, int first_bit, ...) 
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	ed 81       	ldd	r30, Y+5	; 0x05
 48e:	fe 81       	ldd	r31, Y+6	; 0x06
 490:	2f 81       	ldd	r18, Y+7	; 0x07
	va_list pointer;
	 
	*reg |= (1 << first_bit);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	08 84       	ldd	r0, Y+8	; 0x08
 498:	02 c0       	rjmp	.+4      	; 0x49e <set_bits+0x1a>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <set_bits+0x16>
 4a2:	90 81       	ld	r25, Z
 4a4:	89 2b       	or	r24, r25
 4a6:	80 83       	st	Z, r24
	
	if (num >1) {
 4a8:	22 30       	cpi	r18, 0x02	; 2
 4aa:	b0 f0       	brcs	.+44     	; 0x4d8 <set_bits+0x54>
 4ac:	de 01       	movw	r26, r28
 4ae:	1a 96       	adiw	r26, 0x0a	; 10
	
		va_start(pointer, first_bit);
		
		while((num-1) > 0)  {
			*reg |= (1 << va_arg(pointer, int));
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	50 e0       	ldi	r21, 0x00	; 0
	
	if (num >1) {
	
		va_start(pointer, first_bit);
		
		while((num-1) > 0)  {
 4b4:	82 2f       	mov	r24, r18
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 97       	sbiw	r24, 0x02	; 2
 4ba:	74 f0       	brlt	.+28     	; 0x4d8 <set_bits+0x54>
			*reg |= (1 << va_arg(pointer, int));
 4bc:	8c 91       	ld	r24, X
 4be:	12 96       	adiw	r26, 0x02	; 2
 4c0:	ba 01       	movw	r22, r20
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <set_bits+0x44>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	8a 95       	dec	r24
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <set_bits+0x40>
 4cc:	cb 01       	movw	r24, r22
 4ce:	90 81       	ld	r25, Z
 4d0:	89 2b       	or	r24, r25
 4d2:	80 83       	st	Z, r24
			num--;
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	ee cf       	rjmp	.-36     	; 0x4b4 <set_bits+0x30>
		}
		va_end(pointer);
	}
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <clear_bits>:
	
	void clear_bits(volatile uint8_t *reg, unsigned char num, int first_bit, ...) 
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	ed 81       	ldd	r30, Y+5	; 0x05
 4e8:	fe 81       	ldd	r31, Y+6	; 0x06
 4ea:	2f 81       	ldd	r18, Y+7	; 0x07
	va_list pointer;
	
	*reg &= ~(1 << first_bit);
 4ec:	30 81       	ld	r19, Z
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	08 84       	ldd	r0, Y+8	; 0x08
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <clear_bits+0x1c>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <clear_bits+0x18>
 4fe:	80 95       	com	r24
 500:	83 23       	and	r24, r19
 502:	80 83       	st	Z, r24
	 
	if (num >1) {
 504:	22 30       	cpi	r18, 0x02	; 2
 506:	a0 f0       	brcs	.+40     	; 0x530 <clear_bits+0x52>
 508:	de 01       	movw	r26, r28
 50a:	1a 96       	adiw	r26, 0x0a	; 10
		
		va_start(pointer, first_bit);
		
		while(num > 0)  {
			*reg &= ~(1 << va_arg(pointer, int));
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	8c 91       	ld	r24, X
 512:	12 96       	adiw	r26, 0x02	; 2
 514:	30 81       	ld	r19, Z
 516:	ba 01       	movw	r22, r20
 518:	02 c0       	rjmp	.+4      	; 0x51e <clear_bits+0x40>
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	8a 95       	dec	r24
 520:	e2 f7       	brpl	.-8      	; 0x51a <clear_bits+0x3c>
 522:	cb 01       	movw	r24, r22
 524:	80 95       	com	r24
 526:	90 95       	com	r25
 528:	83 23       	and	r24, r19
 52a:	80 83       	st	Z, r24
			num--;
 52c:	21 50       	subi	r18, 0x01	; 1
	 
	if (num >1) {
		
		va_start(pointer, first_bit);
		
		while(num > 0)  {
 52e:	81 f7       	brne	.-32     	; 0x510 <clear_bits+0x32>
			*reg &= ~(1 << va_arg(pointer, int));
			num--;
		}
		va_end(pointer);
	}
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <main>:
void put_lcd_nibble(uint8_t data);
void debug_pin(uint8_t bit);



int main (void) {   
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	a8 97       	sbiw	r28, 0x28	; 40
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	2f ef       	ldi	r18, 0xFF	; 255
 54c:	89 ef       	ldi	r24, 0xF9	; 249
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <main+0x1a>
 558:	00 c0       	rjmp	.+0      	; 0x55a <main+0x24>
 55a:	00 00       	nop
	
	_delay_ms (20);
		DDRB = 0xFF;             // (3)
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	84 b9       	out	0x04, r24	; 4
            
	DDRD = 0xFF;         // (2)
 560:	8a b9       	out	0x0a, r24	; 10

               
 
    clear_bits(&PORTD, 2, RS_PIN, RW_PIN);
 562:	1f 92       	push	r1
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	8f 93       	push	r24
 568:	1f 92       	push	r1
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	8f 93       	push	r24
 56e:	8f 93       	push	r24
 570:	1f 92       	push	r1
 572:	8b e2       	ldi	r24, 0x2B	; 43
 574:	8f 93       	push	r24
 576:	0e 94 6f 02 	call	0x4de	; 0x4de <clear_bits>
 57a:	8f e3       	ldi	r24, 0x3F	; 63
 57c:	9c e9       	ldi	r25, 0x9C	; 156
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <main+0x48>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x4e>
 584:	00 00       	nop
   _delay_ms (10); 
 
put_lcd_nibble(0x03);
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	0e 94 1d 01 	call	0x23a	; 0x23a <put_lcd_nibble>
 58c:	8f e0       	ldi	r24, 0x0F	; 15
 58e:	90 e4       	ldi	r25, 0x40	; 64
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <main+0x5a>
 594:	00 c0       	rjmp	.+0      	; 0x596 <main+0x60>
 596:	00 00       	nop
_delay_ms (4.1);

put_lcd_nibble(0x03);
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	0e 94 1d 01 	call	0x23a	; 0x23a <put_lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	8f e8       	ldi	r24, 0x8F	; 143
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <main+0x6c>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <main+0x72>
 5a8:	00 00       	nop

            



put_lcd_nibble(0x03);
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	0e 94 1d 01 	call	0x23a	; 0x23a <put_lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b0:	8f e0       	ldi	r24, 0x0F	; 15
 5b2:	90 e4       	ldi	r25, 0x40	; 64
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <main+0x7e>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x84>
 5ba:	00 00       	nop
_delay_ms (4.1);
put_lcd_nibble(0x02);
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	0e 94 1d 01 	call	0x23a	; 0x23a <put_lcd_nibble>
 5c2:	8f e0       	ldi	r24, 0x0F	; 15
 5c4:	90 e4       	ldi	r25, 0x40	; 64
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <main+0x90>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x96>
 5cc:	00 00       	nop
_delay_ms (4.1);



put_lcd_data(LCD_FUNCTION_SET | LCD_SET_4BIT_MODE | LCD_SET_2LINE_MODE | LCD_FONT_5X8_MODE);	
 5ce:	88 e2       	ldi	r24, 0x28	; 40
 5d0:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>

  

put_lcd_data(LCD_DISPLAY_OFF);
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>

put_lcd_data(LCD_CLEAR_DISPLAY);	
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>

//Entry Mode

put_lcd_data(LCD_ENTRY_MODE | LCD_CURSOR_INC_DIR_RIGHT| LCD_SHIFT_OFF);
 5e0:	86 e0       	ldi	r24, 0x06	; 6
 5e2:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>


put_lcd_data(LCD_DISPLAY_ON | LCD_CURSOR_ON | LCD_CURSOR_BLINK_ON);
 5e6:	8f e0       	ldi	r24, 0x0F	; 15
 5e8:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>





   	lcd_write_string("Na das war aber eine schwere Geburt");
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_write_string>
 5f4:	9f ef       	ldi	r25, 0xFF	; 255
 5f6:	27 ea       	ldi	r18, 0xA7	; 167
 5f8:	81 e6       	ldi	r24, 0x61	; 97
 5fa:	91 50       	subi	r25, 0x01	; 1
 5fc:	20 40       	sbci	r18, 0x00	; 0
 5fe:	80 40       	sbci	r24, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <main+0xc4>
 602:	00 c0       	rjmp	.+0      	; 0x604 <main+0xce>
 604:	00 00       	nop
   	 _delay_ms (2000);
         
   	put_lcd_data(LCD_CLEAR_DISPLAY);
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>
  
   	
	lcd_write_string("Und das alles wegen einem schlechten Datenblatt...");
 60c:	84 e2       	ldi	r24, 0x24	; 36
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_write_string>
 614:	9f ef       	ldi	r25, 0xFF	; 255
 616:	27 ea       	ldi	r18, 0xA7	; 167
 618:	81 e6       	ldi	r24, 0x61	; 97
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	20 40       	sbci	r18, 0x00	; 0
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	e1 f7       	brne	.-8      	; 0x61a <main+0xe4>
 622:	00 c0       	rjmp	.+0      	; 0x624 <main+0xee>
 624:	00 00       	nop
	_delay_ms (2000);
	put_lcd_data(LCD_CLEAR_DISPLAY);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>
	
	
	sprintf(formatted_string, "DMSG: PORTB:%x",PORTB);
 62c:	85 b1       	in	r24, 0x05	; 5
 62e:	1f 92       	push	r1
 630:	8f 93       	push	r24
 632:	87 e5       	ldi	r24, 0x57	; 87
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	9f 93       	push	r25
 638:	8f 93       	push	r24
 63a:	8e 01       	movw	r16, r28
 63c:	0f 5f       	subi	r16, 0xFF	; 255
 63e:	1f 4f       	sbci	r17, 0xFF	; 255
 640:	1f 93       	push	r17
 642:	0f 93       	push	r16
 644:	0e 94 69 03 	call	0x6d2	; 0x6d2 <sprintf>
	lcd_write_string(formatted_string);
 648:	c8 01       	movw	r24, r16
 64a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_write_string>
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	27 ea       	ldi	r18, 0xA7	; 167
 652:	81 e6       	ldi	r24, 0x61	; 97
 654:	91 50       	subi	r25, 0x01	; 1
 656:	20 40       	sbci	r18, 0x00	; 0
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	e1 f7       	brne	.-8      	; 0x654 <main+0x11e>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <main+0x128>
 65e:	00 00       	nop
	_delay_ms (2000);
	
		
	DDRB &=	~(1 << SENSOR);
 660:	22 98       	cbi	0x04, 2	; 4
 662:	9f ef       	ldi	r25, 0xFF	; 255
 664:	29 ef       	ldi	r18, 0xF9	; 249
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	91 50       	subi	r25, 0x01	; 1
 66a:	20 40       	sbci	r18, 0x00	; 0
 66c:	80 40       	sbci	r24, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <main+0x132>
 670:	00 c0       	rjmp	.+0      	; 0x672 <main+0x13c>
 672:	00 00       	nop
	_delay_ms (20);
	
		
	put_lcd_data(LCD_CLEAR_DISPLAY);	
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61
		
	while(1) {                
     
        debug_pin(PORTB0);
        
	sprintf(formatted_string, "SENSOR: %x",(PINB & (1 << PINB2)));
 684:	86 e6       	ldi	r24, 0x66	; 102
 686:	e8 2e       	mov	r14, r24
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	f8 2e       	mov	r15, r24
	put_lcd_data(LCD_CLEAR_DISPLAY);	
		
		
	while(1) {                
     
        debug_pin(PORTB0);
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <debug_pin>
        
	sprintf(formatted_string, "SENSOR: %x",(PINB & (1 << PINB2)));
 692:	83 b1       	in	r24, 0x03	; 3
 694:	84 70       	andi	r24, 0x04	; 4
 696:	1f 92       	push	r1
 698:	8f 93       	push	r24
 69a:	ff 92       	push	r15
 69c:	ef 92       	push	r14
 69e:	1f 93       	push	r17
 6a0:	0f 93       	push	r16
 6a2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <sprintf>
	lcd_write_string(formatted_string);
 6a6:	c8 01       	movw	r24, r16
 6a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_write_string>
	
	put_lcd_data(LCD_CARRIAGE_RETURN);
 6ac:	80 ec       	ldi	r24, 0xC0	; 192
 6ae:	0e 94 4b 00 	call	0x96	; 0x96 <put_lcd_data>
 6b2:	9f ef       	ldi	r25, 0xFF	; 255
 6b4:	23 ed       	ldi	r18, 0xD3	; 211
 6b6:	80 e3       	ldi	r24, 0x30	; 48
 6b8:	91 50       	subi	r25, 0x01	; 1
 6ba:	20 40       	sbci	r18, 0x00	; 0
 6bc:	80 40       	sbci	r24, 0x00	; 0
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <main+0x182>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <main+0x18c>
 6c2:	00 00       	nop
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	dd cf       	rjmp	.-70     	; 0x68c <main+0x156>

000006d2 <sprintf>:
 6d2:	ae e0       	ldi	r26, 0x0E	; 14
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	ef e6       	ldi	r30, 0x6F	; 111
 6d8:	f3 e0       	ldi	r31, 0x03	; 3
 6da:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__prologue_saves__+0x1c>
 6de:	0d 89       	ldd	r16, Y+21	; 0x15
 6e0:	1e 89       	ldd	r17, Y+22	; 0x16
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	8c 83       	std	Y+4, r24	; 0x04
 6e6:	1a 83       	std	Y+2, r17	; 0x02
 6e8:	09 83       	std	Y+1, r16	; 0x01
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	9f e7       	ldi	r25, 0x7F	; 127
 6ee:	9e 83       	std	Y+6, r25	; 0x06
 6f0:	8d 83       	std	Y+5, r24	; 0x05
 6f2:	ae 01       	movw	r20, r28
 6f4:	47 5e       	subi	r20, 0xE7	; 231
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	6f 89       	ldd	r22, Y+23	; 0x17
 6fa:	78 8d       	ldd	r23, Y+24	; 0x18
 6fc:	ce 01       	movw	r24, r28
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	0e 94 8b 03 	call	0x716	; 0x716 <vfprintf>
 704:	ef 81       	ldd	r30, Y+7	; 0x07
 706:	f8 85       	ldd	r31, Y+8	; 0x08
 708:	e0 0f       	add	r30, r16
 70a:	f1 1f       	adc	r31, r17
 70c:	10 82       	st	Z, r1
 70e:	2e 96       	adiw	r28, 0x0e	; 14
 710:	e4 e0       	ldi	r30, 0x04	; 4
 712:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__epilogue_restores__+0x1c>

00000716 <vfprintf>:
 716:	ab e0       	ldi	r26, 0x0B	; 11
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	e1 e9       	ldi	r30, 0x91	; 145
 71c:	f3 e0       	ldi	r31, 0x03	; 3
 71e:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__prologue_saves__>
 722:	6c 01       	movw	r12, r24
 724:	7b 01       	movw	r14, r22
 726:	8a 01       	movw	r16, r20
 728:	fc 01       	movw	r30, r24
 72a:	17 82       	std	Z+7, r1	; 0x07
 72c:	16 82       	std	Z+6, r1	; 0x06
 72e:	83 81       	ldd	r24, Z+3	; 0x03
 730:	81 ff       	sbrs	r24, 1
 732:	cc c1       	rjmp	.+920    	; 0xacc <__stack+0x1cd>
 734:	ce 01       	movw	r24, r28
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	3c 01       	movw	r6, r24
 73a:	f6 01       	movw	r30, r12
 73c:	93 81       	ldd	r25, Z+3	; 0x03
 73e:	f7 01       	movw	r30, r14
 740:	93 fd       	sbrc	r25, 3
 742:	85 91       	lpm	r24, Z+
 744:	93 ff       	sbrs	r25, 3
 746:	81 91       	ld	r24, Z+
 748:	7f 01       	movw	r14, r30
 74a:	88 23       	and	r24, r24
 74c:	09 f4       	brne	.+2      	; 0x750 <vfprintf+0x3a>
 74e:	ba c1       	rjmp	.+884    	; 0xac4 <__stack+0x1c5>
 750:	85 32       	cpi	r24, 0x25	; 37
 752:	39 f4       	brne	.+14     	; 0x762 <vfprintf+0x4c>
 754:	93 fd       	sbrc	r25, 3
 756:	85 91       	lpm	r24, Z+
 758:	93 ff       	sbrs	r25, 3
 75a:	81 91       	ld	r24, Z+
 75c:	7f 01       	movw	r14, r30
 75e:	85 32       	cpi	r24, 0x25	; 37
 760:	29 f4       	brne	.+10     	; 0x76c <vfprintf+0x56>
 762:	b6 01       	movw	r22, r12
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 76a:	e7 cf       	rjmp	.-50     	; 0x73a <vfprintf+0x24>
 76c:	91 2c       	mov	r9, r1
 76e:	21 2c       	mov	r2, r1
 770:	31 2c       	mov	r3, r1
 772:	ff e1       	ldi	r31, 0x1F	; 31
 774:	f3 15       	cp	r31, r3
 776:	d8 f0       	brcs	.+54     	; 0x7ae <vfprintf+0x98>
 778:	8b 32       	cpi	r24, 0x2B	; 43
 77a:	79 f0       	breq	.+30     	; 0x79a <vfprintf+0x84>
 77c:	38 f4       	brcc	.+14     	; 0x78c <vfprintf+0x76>
 77e:	80 32       	cpi	r24, 0x20	; 32
 780:	79 f0       	breq	.+30     	; 0x7a0 <vfprintf+0x8a>
 782:	83 32       	cpi	r24, 0x23	; 35
 784:	a1 f4       	brne	.+40     	; 0x7ae <vfprintf+0x98>
 786:	23 2d       	mov	r18, r3
 788:	20 61       	ori	r18, 0x10	; 16
 78a:	1d c0       	rjmp	.+58     	; 0x7c6 <vfprintf+0xb0>
 78c:	8d 32       	cpi	r24, 0x2D	; 45
 78e:	61 f0       	breq	.+24     	; 0x7a8 <vfprintf+0x92>
 790:	80 33       	cpi	r24, 0x30	; 48
 792:	69 f4       	brne	.+26     	; 0x7ae <vfprintf+0x98>
 794:	23 2d       	mov	r18, r3
 796:	21 60       	ori	r18, 0x01	; 1
 798:	16 c0       	rjmp	.+44     	; 0x7c6 <vfprintf+0xb0>
 79a:	83 2d       	mov	r24, r3
 79c:	82 60       	ori	r24, 0x02	; 2
 79e:	38 2e       	mov	r3, r24
 7a0:	e3 2d       	mov	r30, r3
 7a2:	e4 60       	ori	r30, 0x04	; 4
 7a4:	3e 2e       	mov	r3, r30
 7a6:	2a c0       	rjmp	.+84     	; 0x7fc <vfprintf+0xe6>
 7a8:	f3 2d       	mov	r31, r3
 7aa:	f8 60       	ori	r31, 0x08	; 8
 7ac:	1d c0       	rjmp	.+58     	; 0x7e8 <vfprintf+0xd2>
 7ae:	37 fc       	sbrc	r3, 7
 7b0:	2d c0       	rjmp	.+90     	; 0x80c <vfprintf+0xf6>
 7b2:	20 ed       	ldi	r18, 0xD0	; 208
 7b4:	28 0f       	add	r18, r24
 7b6:	2a 30       	cpi	r18, 0x0A	; 10
 7b8:	40 f0       	brcs	.+16     	; 0x7ca <vfprintf+0xb4>
 7ba:	8e 32       	cpi	r24, 0x2E	; 46
 7bc:	b9 f4       	brne	.+46     	; 0x7ec <vfprintf+0xd6>
 7be:	36 fc       	sbrc	r3, 6
 7c0:	81 c1       	rjmp	.+770    	; 0xac4 <__stack+0x1c5>
 7c2:	23 2d       	mov	r18, r3
 7c4:	20 64       	ori	r18, 0x40	; 64
 7c6:	32 2e       	mov	r3, r18
 7c8:	19 c0       	rjmp	.+50     	; 0x7fc <vfprintf+0xe6>
 7ca:	36 fe       	sbrs	r3, 6
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0xc4>
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	98 9e       	mul	r9, r24
 7d2:	20 0d       	add	r18, r0
 7d4:	11 24       	eor	r1, r1
 7d6:	92 2e       	mov	r9, r18
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <vfprintf+0xe6>
 7da:	ea e0       	ldi	r30, 0x0A	; 10
 7dc:	2e 9e       	mul	r2, r30
 7de:	20 0d       	add	r18, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	22 2e       	mov	r2, r18
 7e4:	f3 2d       	mov	r31, r3
 7e6:	f0 62       	ori	r31, 0x20	; 32
 7e8:	3f 2e       	mov	r3, r31
 7ea:	08 c0       	rjmp	.+16     	; 0x7fc <vfprintf+0xe6>
 7ec:	8c 36       	cpi	r24, 0x6C	; 108
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <vfprintf+0xe2>
 7f0:	83 2d       	mov	r24, r3
 7f2:	80 68       	ori	r24, 0x80	; 128
 7f4:	38 2e       	mov	r3, r24
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0xe6>
 7f8:	88 36       	cpi	r24, 0x68	; 104
 7fa:	41 f4       	brne	.+16     	; 0x80c <vfprintf+0xf6>
 7fc:	f7 01       	movw	r30, r14
 7fe:	93 fd       	sbrc	r25, 3
 800:	85 91       	lpm	r24, Z+
 802:	93 ff       	sbrs	r25, 3
 804:	81 91       	ld	r24, Z+
 806:	7f 01       	movw	r14, r30
 808:	81 11       	cpse	r24, r1
 80a:	b3 cf       	rjmp	.-154    	; 0x772 <vfprintf+0x5c>
 80c:	98 2f       	mov	r25, r24
 80e:	9f 7d       	andi	r25, 0xDF	; 223
 810:	95 54       	subi	r25, 0x45	; 69
 812:	93 30       	cpi	r25, 0x03	; 3
 814:	28 f4       	brcc	.+10     	; 0x820 <vfprintf+0x10a>
 816:	0c 5f       	subi	r16, 0xFC	; 252
 818:	1f 4f       	sbci	r17, 0xFF	; 255
 81a:	9f e3       	ldi	r25, 0x3F	; 63
 81c:	99 83       	std	Y+1, r25	; 0x01
 81e:	0d c0       	rjmp	.+26     	; 0x83a <vfprintf+0x124>
 820:	83 36       	cpi	r24, 0x63	; 99
 822:	31 f0       	breq	.+12     	; 0x830 <vfprintf+0x11a>
 824:	83 37       	cpi	r24, 0x73	; 115
 826:	71 f0       	breq	.+28     	; 0x844 <vfprintf+0x12e>
 828:	83 35       	cpi	r24, 0x53	; 83
 82a:	09 f0       	breq	.+2      	; 0x82e <vfprintf+0x118>
 82c:	59 c0       	rjmp	.+178    	; 0x8e0 <vfprintf+0x1ca>
 82e:	21 c0       	rjmp	.+66     	; 0x872 <vfprintf+0x15c>
 830:	f8 01       	movw	r30, r16
 832:	80 81       	ld	r24, Z
 834:	89 83       	std	Y+1, r24	; 0x01
 836:	0e 5f       	subi	r16, 0xFE	; 254
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	88 24       	eor	r8, r8
 83c:	83 94       	inc	r8
 83e:	91 2c       	mov	r9, r1
 840:	53 01       	movw	r10, r6
 842:	13 c0       	rjmp	.+38     	; 0x86a <vfprintf+0x154>
 844:	28 01       	movw	r4, r16
 846:	f2 e0       	ldi	r31, 0x02	; 2
 848:	4f 0e       	add	r4, r31
 84a:	51 1c       	adc	r5, r1
 84c:	f8 01       	movw	r30, r16
 84e:	a0 80       	ld	r10, Z
 850:	b1 80       	ldd	r11, Z+1	; 0x01
 852:	36 fe       	sbrs	r3, 6
 854:	03 c0       	rjmp	.+6      	; 0x85c <vfprintf+0x146>
 856:	69 2d       	mov	r22, r9
 858:	70 e0       	ldi	r23, 0x00	; 0
 85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0x14a>
 85c:	6f ef       	ldi	r22, 0xFF	; 255
 85e:	7f ef       	ldi	r23, 0xFF	; 255
 860:	c5 01       	movw	r24, r10
 862:	0e 94 77 05 	call	0xaee	; 0xaee <strnlen>
 866:	4c 01       	movw	r8, r24
 868:	82 01       	movw	r16, r4
 86a:	f3 2d       	mov	r31, r3
 86c:	ff 77       	andi	r31, 0x7F	; 127
 86e:	3f 2e       	mov	r3, r31
 870:	16 c0       	rjmp	.+44     	; 0x89e <vfprintf+0x188>
 872:	28 01       	movw	r4, r16
 874:	22 e0       	ldi	r18, 0x02	; 2
 876:	42 0e       	add	r4, r18
 878:	51 1c       	adc	r5, r1
 87a:	f8 01       	movw	r30, r16
 87c:	a0 80       	ld	r10, Z
 87e:	b1 80       	ldd	r11, Z+1	; 0x01
 880:	36 fe       	sbrs	r3, 6
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x174>
 884:	69 2d       	mov	r22, r9
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <vfprintf+0x178>
 88a:	6f ef       	ldi	r22, 0xFF	; 255
 88c:	7f ef       	ldi	r23, 0xFF	; 255
 88e:	c5 01       	movw	r24, r10
 890:	0e 94 6c 05 	call	0xad8	; 0xad8 <strnlen_P>
 894:	4c 01       	movw	r8, r24
 896:	f3 2d       	mov	r31, r3
 898:	f0 68       	ori	r31, 0x80	; 128
 89a:	3f 2e       	mov	r3, r31
 89c:	82 01       	movw	r16, r4
 89e:	33 fc       	sbrc	r3, 3
 8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <vfprintf+0x1c2>
 8a2:	82 2d       	mov	r24, r2
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	88 16       	cp	r8, r24
 8a8:	99 06       	cpc	r9, r25
 8aa:	b0 f4       	brcc	.+44     	; 0x8d8 <vfprintf+0x1c2>
 8ac:	b6 01       	movw	r22, r12
 8ae:	80 e2       	ldi	r24, 0x20	; 32
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 8b6:	2a 94       	dec	r2
 8b8:	f4 cf       	rjmp	.-24     	; 0x8a2 <vfprintf+0x18c>
 8ba:	f5 01       	movw	r30, r10
 8bc:	37 fc       	sbrc	r3, 7
 8be:	85 91       	lpm	r24, Z+
 8c0:	37 fe       	sbrs	r3, 7
 8c2:	81 91       	ld	r24, Z+
 8c4:	5f 01       	movw	r10, r30
 8c6:	b6 01       	movw	r22, r12
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 8ce:	21 10       	cpse	r2, r1
 8d0:	2a 94       	dec	r2
 8d2:	21 e0       	ldi	r18, 0x01	; 1
 8d4:	82 1a       	sub	r8, r18
 8d6:	91 08       	sbc	r9, r1
 8d8:	81 14       	cp	r8, r1
 8da:	91 04       	cpc	r9, r1
 8dc:	71 f7       	brne	.-36     	; 0x8ba <vfprintf+0x1a4>
 8de:	e8 c0       	rjmp	.+464    	; 0xab0 <__stack+0x1b1>
 8e0:	84 36       	cpi	r24, 0x64	; 100
 8e2:	11 f0       	breq	.+4      	; 0x8e8 <vfprintf+0x1d2>
 8e4:	89 36       	cpi	r24, 0x69	; 105
 8e6:	41 f5       	brne	.+80     	; 0x938 <__stack+0x39>
 8e8:	f8 01       	movw	r30, r16
 8ea:	37 fe       	sbrs	r3, 7
 8ec:	07 c0       	rjmp	.+14     	; 0x8fc <vfprintf+0x1e6>
 8ee:	60 81       	ld	r22, Z
 8f0:	71 81       	ldd	r23, Z+1	; 0x01
 8f2:	82 81       	ldd	r24, Z+2	; 0x02
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	0c 5f       	subi	r16, 0xFC	; 252
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	08 c0       	rjmp	.+16     	; 0x90c <__stack+0xd>
 8fc:	60 81       	ld	r22, Z
 8fe:	71 81       	ldd	r23, Z+1	; 0x01
 900:	07 2e       	mov	r0, r23
 902:	00 0c       	add	r0, r0
 904:	88 0b       	sbc	r24, r24
 906:	99 0b       	sbc	r25, r25
 908:	0e 5f       	subi	r16, 0xFE	; 254
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	f3 2d       	mov	r31, r3
 90e:	ff 76       	andi	r31, 0x6F	; 111
 910:	3f 2e       	mov	r3, r31
 912:	97 ff       	sbrs	r25, 7
 914:	09 c0       	rjmp	.+18     	; 0x928 <__stack+0x29>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	f0 68       	ori	r31, 0x80	; 128
 926:	3f 2e       	mov	r3, r31
 928:	2a e0       	ldi	r18, 0x0A	; 10
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	a3 01       	movw	r20, r6
 92e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__ultoa_invert>
 932:	88 2e       	mov	r8, r24
 934:	86 18       	sub	r8, r6
 936:	45 c0       	rjmp	.+138    	; 0x9c2 <__stack+0xc3>
 938:	85 37       	cpi	r24, 0x75	; 117
 93a:	31 f4       	brne	.+12     	; 0x948 <__stack+0x49>
 93c:	23 2d       	mov	r18, r3
 93e:	2f 7e       	andi	r18, 0xEF	; 239
 940:	b2 2e       	mov	r11, r18
 942:	2a e0       	ldi	r18, 0x0A	; 10
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	25 c0       	rjmp	.+74     	; 0x992 <__stack+0x93>
 948:	93 2d       	mov	r25, r3
 94a:	99 7f       	andi	r25, 0xF9	; 249
 94c:	b9 2e       	mov	r11, r25
 94e:	8f 36       	cpi	r24, 0x6F	; 111
 950:	c1 f0       	breq	.+48     	; 0x982 <__stack+0x83>
 952:	18 f4       	brcc	.+6      	; 0x95a <__stack+0x5b>
 954:	88 35       	cpi	r24, 0x58	; 88
 956:	79 f0       	breq	.+30     	; 0x976 <__stack+0x77>
 958:	b5 c0       	rjmp	.+362    	; 0xac4 <__stack+0x1c5>
 95a:	80 37       	cpi	r24, 0x70	; 112
 95c:	19 f0       	breq	.+6      	; 0x964 <__stack+0x65>
 95e:	88 37       	cpi	r24, 0x78	; 120
 960:	21 f0       	breq	.+8      	; 0x96a <__stack+0x6b>
 962:	b0 c0       	rjmp	.+352    	; 0xac4 <__stack+0x1c5>
 964:	e9 2f       	mov	r30, r25
 966:	e0 61       	ori	r30, 0x10	; 16
 968:	be 2e       	mov	r11, r30
 96a:	b4 fe       	sbrs	r11, 4
 96c:	0d c0       	rjmp	.+26     	; 0x988 <__stack+0x89>
 96e:	fb 2d       	mov	r31, r11
 970:	f4 60       	ori	r31, 0x04	; 4
 972:	bf 2e       	mov	r11, r31
 974:	09 c0       	rjmp	.+18     	; 0x988 <__stack+0x89>
 976:	34 fe       	sbrs	r3, 4
 978:	0a c0       	rjmp	.+20     	; 0x98e <__stack+0x8f>
 97a:	29 2f       	mov	r18, r25
 97c:	26 60       	ori	r18, 0x06	; 6
 97e:	b2 2e       	mov	r11, r18
 980:	06 c0       	rjmp	.+12     	; 0x98e <__stack+0x8f>
 982:	28 e0       	ldi	r18, 0x08	; 8
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	05 c0       	rjmp	.+10     	; 0x992 <__stack+0x93>
 988:	20 e1       	ldi	r18, 0x10	; 16
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
 98e:	20 e1       	ldi	r18, 0x10	; 16
 990:	32 e0       	ldi	r19, 0x02	; 2
 992:	f8 01       	movw	r30, r16
 994:	b7 fe       	sbrs	r11, 7
 996:	07 c0       	rjmp	.+14     	; 0x9a6 <__stack+0xa7>
 998:	60 81       	ld	r22, Z
 99a:	71 81       	ldd	r23, Z+1	; 0x01
 99c:	82 81       	ldd	r24, Z+2	; 0x02
 99e:	93 81       	ldd	r25, Z+3	; 0x03
 9a0:	0c 5f       	subi	r16, 0xFC	; 252
 9a2:	1f 4f       	sbci	r17, 0xFF	; 255
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <__stack+0xb3>
 9a6:	60 81       	ld	r22, Z
 9a8:	71 81       	ldd	r23, Z+1	; 0x01
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 5f       	subi	r16, 0xFE	; 254
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	a3 01       	movw	r20, r6
 9b4:	0e 94 be 05 	call	0xb7c	; 0xb7c <__ultoa_invert>
 9b8:	88 2e       	mov	r8, r24
 9ba:	86 18       	sub	r8, r6
 9bc:	fb 2d       	mov	r31, r11
 9be:	ff 77       	andi	r31, 0x7F	; 127
 9c0:	3f 2e       	mov	r3, r31
 9c2:	36 fe       	sbrs	r3, 6
 9c4:	0d c0       	rjmp	.+26     	; 0x9e0 <__stack+0xe1>
 9c6:	23 2d       	mov	r18, r3
 9c8:	2e 7f       	andi	r18, 0xFE	; 254
 9ca:	a2 2e       	mov	r10, r18
 9cc:	89 14       	cp	r8, r9
 9ce:	58 f4       	brcc	.+22     	; 0x9e6 <__stack+0xe7>
 9d0:	34 fe       	sbrs	r3, 4
 9d2:	0b c0       	rjmp	.+22     	; 0x9ea <__stack+0xeb>
 9d4:	32 fc       	sbrc	r3, 2
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__stack+0xeb>
 9d8:	83 2d       	mov	r24, r3
 9da:	8e 7e       	andi	r24, 0xEE	; 238
 9dc:	a8 2e       	mov	r10, r24
 9de:	05 c0       	rjmp	.+10     	; 0x9ea <__stack+0xeb>
 9e0:	b8 2c       	mov	r11, r8
 9e2:	a3 2c       	mov	r10, r3
 9e4:	03 c0       	rjmp	.+6      	; 0x9ec <__stack+0xed>
 9e6:	b8 2c       	mov	r11, r8
 9e8:	01 c0       	rjmp	.+2      	; 0x9ec <__stack+0xed>
 9ea:	b9 2c       	mov	r11, r9
 9ec:	a4 fe       	sbrs	r10, 4
 9ee:	0f c0       	rjmp	.+30     	; 0xa0e <__stack+0x10f>
 9f0:	fe 01       	movw	r30, r28
 9f2:	e8 0d       	add	r30, r8
 9f4:	f1 1d       	adc	r31, r1
 9f6:	80 81       	ld	r24, Z
 9f8:	80 33       	cpi	r24, 0x30	; 48
 9fa:	21 f4       	brne	.+8      	; 0xa04 <__stack+0x105>
 9fc:	9a 2d       	mov	r25, r10
 9fe:	99 7e       	andi	r25, 0xE9	; 233
 a00:	a9 2e       	mov	r10, r25
 a02:	09 c0       	rjmp	.+18     	; 0xa16 <__stack+0x117>
 a04:	a2 fe       	sbrs	r10, 2
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <__stack+0x115>
 a08:	b3 94       	inc	r11
 a0a:	b3 94       	inc	r11
 a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__stack+0x117>
 a0e:	8a 2d       	mov	r24, r10
 a10:	86 78       	andi	r24, 0x86	; 134
 a12:	09 f0       	breq	.+2      	; 0xa16 <__stack+0x117>
 a14:	b3 94       	inc	r11
 a16:	a3 fc       	sbrc	r10, 3
 a18:	11 c0       	rjmp	.+34     	; 0xa3c <__stack+0x13d>
 a1a:	a0 fe       	sbrs	r10, 0
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <__stack+0x12b>
 a1e:	b2 14       	cp	r11, r2
 a20:	88 f4       	brcc	.+34     	; 0xa44 <__stack+0x145>
 a22:	28 0c       	add	r2, r8
 a24:	92 2c       	mov	r9, r2
 a26:	9b 18       	sub	r9, r11
 a28:	0e c0       	rjmp	.+28     	; 0xa46 <__stack+0x147>
 a2a:	b2 14       	cp	r11, r2
 a2c:	60 f4       	brcc	.+24     	; 0xa46 <__stack+0x147>
 a2e:	b6 01       	movw	r22, r12
 a30:	80 e2       	ldi	r24, 0x20	; 32
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 a38:	b3 94       	inc	r11
 a3a:	f7 cf       	rjmp	.-18     	; 0xa2a <__stack+0x12b>
 a3c:	b2 14       	cp	r11, r2
 a3e:	18 f4       	brcc	.+6      	; 0xa46 <__stack+0x147>
 a40:	2b 18       	sub	r2, r11
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <__stack+0x149>
 a44:	98 2c       	mov	r9, r8
 a46:	21 2c       	mov	r2, r1
 a48:	a4 fe       	sbrs	r10, 4
 a4a:	10 c0       	rjmp	.+32     	; 0xa6c <__stack+0x16d>
 a4c:	b6 01       	movw	r22, r12
 a4e:	80 e3       	ldi	r24, 0x30	; 48
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 a56:	a2 fe       	sbrs	r10, 2
 a58:	17 c0       	rjmp	.+46     	; 0xa88 <__stack+0x189>
 a5a:	a1 fc       	sbrc	r10, 1
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <__stack+0x165>
 a5e:	88 e7       	ldi	r24, 0x78	; 120
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x169>
 a64:	88 e5       	ldi	r24, 0x58	; 88
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	b6 01       	movw	r22, r12
 a6a:	0c c0       	rjmp	.+24     	; 0xa84 <__stack+0x185>
 a6c:	8a 2d       	mov	r24, r10
 a6e:	86 78       	andi	r24, 0x86	; 134
 a70:	59 f0       	breq	.+22     	; 0xa88 <__stack+0x189>
 a72:	a1 fe       	sbrs	r10, 1
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <__stack+0x17b>
 a76:	8b e2       	ldi	r24, 0x2B	; 43
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <__stack+0x17d>
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	a7 fc       	sbrc	r10, 7
 a7e:	8d e2       	ldi	r24, 0x2D	; 45
 a80:	b6 01       	movw	r22, r12
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 a88:	89 14       	cp	r8, r9
 a8a:	38 f4       	brcc	.+14     	; 0xa9a <__stack+0x19b>
 a8c:	b6 01       	movw	r22, r12
 a8e:	80 e3       	ldi	r24, 0x30	; 48
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 a96:	9a 94       	dec	r9
 a98:	f7 cf       	rjmp	.-18     	; 0xa88 <__stack+0x189>
 a9a:	8a 94       	dec	r8
 a9c:	f3 01       	movw	r30, r6
 a9e:	e8 0d       	add	r30, r8
 aa0:	f1 1d       	adc	r31, r1
 aa2:	80 81       	ld	r24, Z
 aa4:	b6 01       	movw	r22, r12
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 aac:	81 10       	cpse	r8, r1
 aae:	f5 cf       	rjmp	.-22     	; 0xa9a <__stack+0x19b>
 ab0:	22 20       	and	r2, r2
 ab2:	09 f4       	brne	.+2      	; 0xab6 <__stack+0x1b7>
 ab4:	42 ce       	rjmp	.-892    	; 0x73a <vfprintf+0x24>
 ab6:	b6 01       	movw	r22, r12
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 82 05 	call	0xb04	; 0xb04 <fputc>
 ac0:	2a 94       	dec	r2
 ac2:	f6 cf       	rjmp	.-20     	; 0xab0 <__stack+0x1b1>
 ac4:	f6 01       	movw	r30, r12
 ac6:	86 81       	ldd	r24, Z+6	; 0x06
 ac8:	97 81       	ldd	r25, Z+7	; 0x07
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <__stack+0x1d1>
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	9f ef       	ldi	r25, 0xFF	; 255
 ad0:	2b 96       	adiw	r28, 0x0b	; 11
 ad2:	e2 e1       	ldi	r30, 0x12	; 18
 ad4:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__epilogue_restores__>

00000ad8 <strnlen_P>:
 ad8:	fc 01       	movw	r30, r24
 ada:	05 90       	lpm	r0, Z+
 adc:	61 50       	subi	r22, 0x01	; 1
 ade:	70 40       	sbci	r23, 0x00	; 0
 ae0:	01 10       	cpse	r0, r1
 ae2:	d8 f7       	brcc	.-10     	; 0xada <strnlen_P+0x2>
 ae4:	80 95       	com	r24
 ae6:	90 95       	com	r25
 ae8:	8e 0f       	add	r24, r30
 aea:	9f 1f       	adc	r25, r31
 aec:	08 95       	ret

00000aee <strnlen>:
 aee:	fc 01       	movw	r30, r24
 af0:	61 50       	subi	r22, 0x01	; 1
 af2:	70 40       	sbci	r23, 0x00	; 0
 af4:	01 90       	ld	r0, Z+
 af6:	01 10       	cpse	r0, r1
 af8:	d8 f7       	brcc	.-10     	; 0xaf0 <strnlen+0x2>
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	8e 0f       	add	r24, r30
 b00:	9f 1f       	adc	r25, r31
 b02:	08 95       	ret

00000b04 <fputc>:
 b04:	0f 93       	push	r16
 b06:	1f 93       	push	r17
 b08:	cf 93       	push	r28
 b0a:	df 93       	push	r29
 b0c:	fb 01       	movw	r30, r22
 b0e:	23 81       	ldd	r18, Z+3	; 0x03
 b10:	21 fd       	sbrc	r18, 1
 b12:	03 c0       	rjmp	.+6      	; 0xb1a <fputc+0x16>
 b14:	8f ef       	ldi	r24, 0xFF	; 255
 b16:	9f ef       	ldi	r25, 0xFF	; 255
 b18:	2c c0       	rjmp	.+88     	; 0xb72 <fputc+0x6e>
 b1a:	22 ff       	sbrs	r18, 2
 b1c:	16 c0       	rjmp	.+44     	; 0xb4a <fputc+0x46>
 b1e:	46 81       	ldd	r20, Z+6	; 0x06
 b20:	57 81       	ldd	r21, Z+7	; 0x07
 b22:	24 81       	ldd	r18, Z+4	; 0x04
 b24:	35 81       	ldd	r19, Z+5	; 0x05
 b26:	42 17       	cp	r20, r18
 b28:	53 07       	cpc	r21, r19
 b2a:	44 f4       	brge	.+16     	; 0xb3c <fputc+0x38>
 b2c:	a0 81       	ld	r26, Z
 b2e:	b1 81       	ldd	r27, Z+1	; 0x01
 b30:	9d 01       	movw	r18, r26
 b32:	2f 5f       	subi	r18, 0xFF	; 255
 b34:	3f 4f       	sbci	r19, 0xFF	; 255
 b36:	31 83       	std	Z+1, r19	; 0x01
 b38:	20 83       	st	Z, r18
 b3a:	8c 93       	st	X, r24
 b3c:	26 81       	ldd	r18, Z+6	; 0x06
 b3e:	37 81       	ldd	r19, Z+7	; 0x07
 b40:	2f 5f       	subi	r18, 0xFF	; 255
 b42:	3f 4f       	sbci	r19, 0xFF	; 255
 b44:	37 83       	std	Z+7, r19	; 0x07
 b46:	26 83       	std	Z+6, r18	; 0x06
 b48:	14 c0       	rjmp	.+40     	; 0xb72 <fputc+0x6e>
 b4a:	8b 01       	movw	r16, r22
 b4c:	ec 01       	movw	r28, r24
 b4e:	fb 01       	movw	r30, r22
 b50:	00 84       	ldd	r0, Z+8	; 0x08
 b52:	f1 85       	ldd	r31, Z+9	; 0x09
 b54:	e0 2d       	mov	r30, r0
 b56:	09 95       	icall
 b58:	89 2b       	or	r24, r25
 b5a:	e1 f6       	brne	.-72     	; 0xb14 <fputc+0x10>
 b5c:	d8 01       	movw	r26, r16
 b5e:	16 96       	adiw	r26, 0x06	; 6
 b60:	8d 91       	ld	r24, X+
 b62:	9c 91       	ld	r25, X
 b64:	17 97       	sbiw	r26, 0x07	; 7
 b66:	01 96       	adiw	r24, 0x01	; 1
 b68:	17 96       	adiw	r26, 0x07	; 7
 b6a:	9c 93       	st	X, r25
 b6c:	8e 93       	st	-X, r24
 b6e:	16 97       	sbiw	r26, 0x06	; 6
 b70:	ce 01       	movw	r24, r28
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	1f 91       	pop	r17
 b78:	0f 91       	pop	r16
 b7a:	08 95       	ret

00000b7c <__ultoa_invert>:
 b7c:	fa 01       	movw	r30, r20
 b7e:	aa 27       	eor	r26, r26
 b80:	28 30       	cpi	r18, 0x08	; 8
 b82:	51 f1       	breq	.+84     	; 0xbd8 <__ultoa_invert+0x5c>
 b84:	20 31       	cpi	r18, 0x10	; 16
 b86:	81 f1       	breq	.+96     	; 0xbe8 <__ultoa_invert+0x6c>
 b88:	e8 94       	clt
 b8a:	6f 93       	push	r22
 b8c:	6e 7f       	andi	r22, 0xFE	; 254
 b8e:	6e 5f       	subi	r22, 0xFE	; 254
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	af 4f       	sbci	r26, 0xFF	; 255
 b98:	b1 e0       	ldi	r27, 0x01	; 1
 b9a:	3e d0       	rcall	.+124    	; 0xc18 <__ultoa_invert+0x9c>
 b9c:	b4 e0       	ldi	r27, 0x04	; 4
 b9e:	3c d0       	rcall	.+120    	; 0xc18 <__ultoa_invert+0x9c>
 ba0:	67 0f       	add	r22, r23
 ba2:	78 1f       	adc	r23, r24
 ba4:	89 1f       	adc	r24, r25
 ba6:	9a 1f       	adc	r25, r26
 ba8:	a1 1d       	adc	r26, r1
 baa:	68 0f       	add	r22, r24
 bac:	79 1f       	adc	r23, r25
 bae:	8a 1f       	adc	r24, r26
 bb0:	91 1d       	adc	r25, r1
 bb2:	a1 1d       	adc	r26, r1
 bb4:	6a 0f       	add	r22, r26
 bb6:	71 1d       	adc	r23, r1
 bb8:	81 1d       	adc	r24, r1
 bba:	91 1d       	adc	r25, r1
 bbc:	a1 1d       	adc	r26, r1
 bbe:	20 d0       	rcall	.+64     	; 0xc00 <__ultoa_invert+0x84>
 bc0:	09 f4       	brne	.+2      	; 0xbc4 <__ultoa_invert+0x48>
 bc2:	68 94       	set
 bc4:	3f 91       	pop	r19
 bc6:	2a e0       	ldi	r18, 0x0A	; 10
 bc8:	26 9f       	mul	r18, r22
 bca:	11 24       	eor	r1, r1
 bcc:	30 19       	sub	r19, r0
 bce:	30 5d       	subi	r19, 0xD0	; 208
 bd0:	31 93       	st	Z+, r19
 bd2:	de f6       	brtc	.-74     	; 0xb8a <__ultoa_invert+0xe>
 bd4:	cf 01       	movw	r24, r30
 bd6:	08 95       	ret
 bd8:	46 2f       	mov	r20, r22
 bda:	47 70       	andi	r20, 0x07	; 7
 bdc:	40 5d       	subi	r20, 0xD0	; 208
 bde:	41 93       	st	Z+, r20
 be0:	b3 e0       	ldi	r27, 0x03	; 3
 be2:	0f d0       	rcall	.+30     	; 0xc02 <__ultoa_invert+0x86>
 be4:	c9 f7       	brne	.-14     	; 0xbd8 <__ultoa_invert+0x5c>
 be6:	f6 cf       	rjmp	.-20     	; 0xbd4 <__ultoa_invert+0x58>
 be8:	46 2f       	mov	r20, r22
 bea:	4f 70       	andi	r20, 0x0F	; 15
 bec:	40 5d       	subi	r20, 0xD0	; 208
 bee:	4a 33       	cpi	r20, 0x3A	; 58
 bf0:	18 f0       	brcs	.+6      	; 0xbf8 <__ultoa_invert+0x7c>
 bf2:	49 5d       	subi	r20, 0xD9	; 217
 bf4:	31 fd       	sbrc	r19, 1
 bf6:	40 52       	subi	r20, 0x20	; 32
 bf8:	41 93       	st	Z+, r20
 bfa:	02 d0       	rcall	.+4      	; 0xc00 <__ultoa_invert+0x84>
 bfc:	a9 f7       	brne	.-22     	; 0xbe8 <__ultoa_invert+0x6c>
 bfe:	ea cf       	rjmp	.-44     	; 0xbd4 <__ultoa_invert+0x58>
 c00:	b4 e0       	ldi	r27, 0x04	; 4
 c02:	a6 95       	lsr	r26
 c04:	97 95       	ror	r25
 c06:	87 95       	ror	r24
 c08:	77 95       	ror	r23
 c0a:	67 95       	ror	r22
 c0c:	ba 95       	dec	r27
 c0e:	c9 f7       	brne	.-14     	; 0xc02 <__ultoa_invert+0x86>
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	61 05       	cpc	r22, r1
 c14:	71 05       	cpc	r23, r1
 c16:	08 95       	ret
 c18:	9b 01       	movw	r18, r22
 c1a:	ac 01       	movw	r20, r24
 c1c:	0a 2e       	mov	r0, r26
 c1e:	06 94       	lsr	r0
 c20:	57 95       	ror	r21
 c22:	47 95       	ror	r20
 c24:	37 95       	ror	r19
 c26:	27 95       	ror	r18
 c28:	ba 95       	dec	r27
 c2a:	c9 f7       	brne	.-14     	; 0xc1e <__ultoa_invert+0xa2>
 c2c:	62 0f       	add	r22, r18
 c2e:	73 1f       	adc	r23, r19
 c30:	84 1f       	adc	r24, r20
 c32:	95 1f       	adc	r25, r21
 c34:	a0 1d       	adc	r26, r0
 c36:	08 95       	ret

00000c38 <__prologue_saves__>:
 c38:	2f 92       	push	r2
 c3a:	3f 92       	push	r3
 c3c:	4f 92       	push	r4
 c3e:	5f 92       	push	r5
 c40:	6f 92       	push	r6
 c42:	7f 92       	push	r7
 c44:	8f 92       	push	r8
 c46:	9f 92       	push	r9
 c48:	af 92       	push	r10
 c4a:	bf 92       	push	r11
 c4c:	cf 92       	push	r12
 c4e:	df 92       	push	r13
 c50:	ef 92       	push	r14
 c52:	ff 92       	push	r15
 c54:	0f 93       	push	r16
 c56:	1f 93       	push	r17
 c58:	cf 93       	push	r28
 c5a:	df 93       	push	r29
 c5c:	cd b7       	in	r28, 0x3d	; 61
 c5e:	de b7       	in	r29, 0x3e	; 62
 c60:	ca 1b       	sub	r28, r26
 c62:	db 0b       	sbc	r29, r27
 c64:	0f b6       	in	r0, 0x3f	; 63
 c66:	f8 94       	cli
 c68:	de bf       	out	0x3e, r29	; 62
 c6a:	0f be       	out	0x3f, r0	; 63
 c6c:	cd bf       	out	0x3d, r28	; 61
 c6e:	09 94       	ijmp

00000c70 <__epilogue_restores__>:
 c70:	2a 88       	ldd	r2, Y+18	; 0x12
 c72:	39 88       	ldd	r3, Y+17	; 0x11
 c74:	48 88       	ldd	r4, Y+16	; 0x10
 c76:	5f 84       	ldd	r5, Y+15	; 0x0f
 c78:	6e 84       	ldd	r6, Y+14	; 0x0e
 c7a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c7c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c80:	aa 84       	ldd	r10, Y+10	; 0x0a
 c82:	b9 84       	ldd	r11, Y+9	; 0x09
 c84:	c8 84       	ldd	r12, Y+8	; 0x08
 c86:	df 80       	ldd	r13, Y+7	; 0x07
 c88:	ee 80       	ldd	r14, Y+6	; 0x06
 c8a:	fd 80       	ldd	r15, Y+5	; 0x05
 c8c:	0c 81       	ldd	r16, Y+4	; 0x04
 c8e:	1b 81       	ldd	r17, Y+3	; 0x03
 c90:	aa 81       	ldd	r26, Y+2	; 0x02
 c92:	b9 81       	ldd	r27, Y+1	; 0x01
 c94:	ce 0f       	add	r28, r30
 c96:	d1 1d       	adc	r29, r1
 c98:	0f b6       	in	r0, 0x3f	; 63
 c9a:	f8 94       	cli
 c9c:	de bf       	out	0x3e, r29	; 62
 c9e:	0f be       	out	0x3f, r0	; 63
 ca0:	cd bf       	out	0x3d, r28	; 61
 ca2:	ed 01       	movw	r28, r26
 ca4:	08 95       	ret

00000ca6 <_exit>:
 ca6:	f8 94       	cli

00000ca8 <__stop_program>:
 ca8:	ff cf       	rjmp	.-2      	; 0xca8 <__stop_program>
