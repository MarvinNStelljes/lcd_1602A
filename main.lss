
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000c2e  00000ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001337  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000980  00000000  00000000  000020e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056e  00000000  00000000  00002a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00002fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c08  00000000  00000000  00003635  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000423d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 37       	cpi	r26, 0x72	; 114
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  8e:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <set_bits>:




void set_bits(unsigned char *reg, unsigned char num, int first_bit, ...) 
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	ed 81       	ldd	r30, Y+5	; 0x05
  a0:	fe 81       	ldd	r31, Y+6	; 0x06
  a2:	2f 81       	ldd	r18, Y+7	; 0x07
	va_list pointer;
	 
	*reg |= (1 << first_bit);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 84       	ldd	r0, Y+8	; 0x08
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <set_bits+0x1a>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <set_bits+0x16>
  b4:	90 81       	ld	r25, Z
  b6:	89 2b       	or	r24, r25
  b8:	80 83       	st	Z, r24
	
	if (num >1) {
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	b0 f0       	brcs	.+44     	; 0xea <set_bits+0x54>
  be:	de 01       	movw	r26, r28
  c0:	1a 96       	adiw	r26, 0x0a	; 10
	
		va_start(pointer, first_bit);
		
		while((num-1) > 0)  {
			*reg |= (1 << va_arg(pointer, int));
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	50 e0       	ldi	r21, 0x00	; 0
	
	if (num >1) {
	
		va_start(pointer, first_bit);
		
		while((num-1) > 0)  {
  c6:	82 2f       	mov	r24, r18
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 97       	sbiw	r24, 0x02	; 2
  cc:	74 f0       	brlt	.+28     	; 0xea <set_bits+0x54>
			*reg |= (1 << va_arg(pointer, int));
  ce:	8c 91       	ld	r24, X
  d0:	12 96       	adiw	r26, 0x02	; 2
  d2:	ba 01       	movw	r22, r20
  d4:	02 c0       	rjmp	.+4      	; 0xda <set_bits+0x44>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <set_bits+0x40>
  de:	cb 01       	movw	r24, r22
  e0:	90 81       	ld	r25, Z
  e2:	89 2b       	or	r24, r25
  e4:	80 83       	st	Z, r24
			num--;
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	ee cf       	rjmp	.-36     	; 0xc6 <set_bits+0x30>
		}
		va_end(pointer);
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <clear_bits>:
	
	void clear_bits(unsigned char *reg, unsigned char num, int first_bit, ...) 
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	ed 81       	ldd	r30, Y+5	; 0x05
  fa:	fe 81       	ldd	r31, Y+6	; 0x06
  fc:	2f 81       	ldd	r18, Y+7	; 0x07
	va_list pointer;
	
	*reg &= ~(1 << first_bit);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 84       	ldd	r0, Y+8	; 0x08
 104:	02 c0       	rjmp	.+4      	; 0x10a <clear_bits+0x1a>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <clear_bits+0x16>
 10e:	80 95       	com	r24
 110:	90 81       	ld	r25, Z
 112:	89 23       	and	r24, r25
 114:	80 83       	st	Z, r24
	 
	if (num >1) {
 116:	22 30       	cpi	r18, 0x02	; 2
 118:	a0 f0       	brcs	.+40     	; 0x142 <clear_bits+0x52>
 11a:	de 01       	movw	r26, r28
 11c:	1a 96       	adiw	r26, 0x0a	; 10
		
		va_start(pointer, first_bit);
		
		while(num > 0)  {
			*reg &= ~(1 << va_arg(pointer, int));
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	8c 91       	ld	r24, X
 124:	12 96       	adiw	r26, 0x02	; 2
 126:	ba 01       	movw	r22, r20
 128:	02 c0       	rjmp	.+4      	; 0x12e <clear_bits+0x3e>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <clear_bits+0x3a>
 132:	cb 01       	movw	r24, r22
 134:	80 95       	com	r24
 136:	90 95       	com	r25
 138:	90 81       	ld	r25, Z
 13a:	89 23       	and	r24, r25
 13c:	80 83       	st	Z, r24
			num--;
 13e:	21 50       	subi	r18, 0x01	; 1
	 
	if (num >1) {
		
		va_start(pointer, first_bit);
		
		while(num > 0)  {
 140:	81 f7       	brne	.-32     	; 0x122 <clear_bits+0x32>
			*reg &= ~(1 << va_arg(pointer, int));
			num--;
		}
		va_end(pointer);
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <put_lcd_data>:
	}
	
	
	
void put_lcd_data(uint8_t data)	
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	c8 2f       	mov	r28, r24
	LCD_DATA &= ~((1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	8f 70       	andi	r24, 0x0F	; 15
 156:	8b b9       	out	0x0b, r24	; 11
	
	set_bits(&PORTB, 1, EN); 
 158:	1f 92       	push	r1
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	8f 93       	push	r24
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	8f 93       	push	r24
 162:	1f 92       	push	r1
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	8f 93       	push	r24
 168:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>

	if ((data & BIT7) != 0)
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	c7 fd       	sbrc	r28, 7
		LCD_DATA |= (1 << LCD_D7);
 178:	5f 9a       	sbi	0x0b, 7	; 11
	if ((data & BIT6) != 0)
 17a:	c6 fd       	sbrc	r28, 6
		LCD_DATA |= (1 << LCD_D6);
 17c:	5e 9a       	sbi	0x0b, 6	; 11
	if ((data & BIT5) != 0)
 17e:	c5 fd       	sbrc	r28, 5
		LCD_DATA |= (1 << LCD_D5);
 180:	5d 9a       	sbi	0x0b, 5	; 11
	if ((data & BIT4) != 0)
 182:	c4 fd       	sbrc	r28, 4
		LCD_DATA |= (1 << LCD_D4);
 184:	5c 9a       	sbi	0x0b, 4	; 11

	clear_bits(&PORTB, 1, EN);
 186:	1f 92       	push	r1
 188:	04 e0       	ldi	r16, 0x04	; 4
 18a:	0f 93       	push	r16
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	1f 93       	push	r17
 190:	1f 92       	push	r1
 192:	d5 e2       	ldi	r29, 0x25	; 37
 194:	df 93       	push	r29
 196:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>

	LCD_DATA &= ~((1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7));
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	8b b9       	out	0x0b, r24	; 11

	set_bits(&PORTB, 1, EN);     
 1a0:	1f 92       	push	r1
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	1f 92       	push	r1
 1a8:	df 93       	push	r29
 1aa:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>

	if ((data & BIT3) != 0)
 1ae:	8d b7       	in	r24, 0x3d	; 61
 1b0:	9e b7       	in	r25, 0x3e	; 62
 1b2:	0a 96       	adiw	r24, 0x0a	; 10
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	9e bf       	out	0x3e, r25	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	8d bf       	out	0x3d, r24	; 61
 1be:	c3 fd       	sbrc	r28, 3
		LCD_DATA |= (1 << LCD_D7);
 1c0:	5f 9a       	sbi	0x0b, 7	; 11
	if ((data & BIT2) != 0)
 1c2:	c2 fd       	sbrc	r28, 2
		LCD_DATA |= (1 << LCD_D6);
 1c4:	5e 9a       	sbi	0x0b, 6	; 11
	if ((data & BIT1) != 0)
 1c6:	c1 fd       	sbrc	r28, 1
		LCD_DATA |= (1 << LCD_D5);
 1c8:	5d 9a       	sbi	0x0b, 5	; 11
	if ((data & BIT0) != 0)
 1ca:	c0 fd       	sbrc	r28, 0
		LCD_DATA |= (1 << LCD_D4);
 1cc:	5c 9a       	sbi	0x0b, 4	; 11

	clear_bits(&PORTB, 1, EN);
 1ce:	1f 92       	push	r1
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	8f 93       	push	r24
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	8f 93       	push	r24
 1d8:	1f 92       	push	r1
 1da:	85 e2       	ldi	r24, 0x25	; 37
 1dc:	8f 93       	push	r24
 1de:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
	
	
	
	
	while(get_lcd_busy_flag() > 0);  //Der ist wichtig!!!
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0e 94 db 01 	call	0x3b6	; 0x3b6 <get_lcd_busy_flag>
 1f0:	18 16       	cp	r1, r24
 1f2:	19 06       	cpc	r1, r25
 1f4:	dc f3       	brlt	.-10     	; 0x1ec <put_lcd_data+0xa4>
	
	
		
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <lcd_write>:
		va_end(pointer);
	}
}
	
	void lcd_write(unsigned char character)
	{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	08 2f       	mov	r16, r24
		
		
			 set_bits(&RS_PORT, 1, RS_PIN); 
 20a:	1f 92       	push	r1
 20c:	12 e0       	ldi	r17, 0x02	; 2
 20e:	1f 93       	push	r17
 210:	d1 e0       	ldi	r29, 0x01	; 1
 212:	df 93       	push	r29
 214:	1f 92       	push	r1
 216:	cb e2       	ldi	r28, 0x2B	; 43
 218:	cf 93       	push	r28
 21a:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	8f e9       	ldi	r24, 0x9F	; 159
 220:	9f e0       	ldi	r25, 0x0F	; 15
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_write+0x22>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_write+0x28>
 228:	00 00       	nop
	
   _delay_ms (1); 
	
	 put_lcd_data(character);
 22a:	80 2f       	mov	r24, r16
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>

	
		
	
		
	clear_bits(&RS_PORT, 1, RS_PIN);
 232:	1f 92       	push	r1
 234:	1f 93       	push	r17
 236:	df 93       	push	r29
 238:	1f 92       	push	r1
 23a:	cf 93       	push	r28
 23c:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
	

	//while(get_lcd_busy_flag() > 0);
}
 240:	8d b7       	in	r24, 0x3d	; 61
 242:	9e b7       	in	r25, 0x3e	; 62
 244:	0a 96       	adiw	r24, 0x0a	; 10
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	9e bf       	out	0x3e, r25	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	8d bf       	out	0x3d, r24	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <lcd_write_string>:
	

void lcd_write_string(unsigned char *string)
{
 25a:	af 92       	push	r10
 25c:	bf 92       	push	r11
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	int cnt = 0; 
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	10 e0       	ldi	r17, 0x00	; 0
	
	while(*string != 0) {
			
		set_bits(&RS_PORT, 1, RS_PIN); 
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	f8 2e       	mov	r15, r24
 276:	ee 24       	eor	r14, r14
 278:	e3 94       	inc	r14
 27a:	9b e2       	ldi	r25, 0x2B	; 43
 27c:	d9 2e       	mov	r13, r25
 27e:	5e 01       	movw	r10, r28

void lcd_write_string(unsigned char *string)
{
	int cnt = 0; 
	
	while(*string != 0) {
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	61 f1       	breq	.+88     	; 0x2de <lcd_write_string+0x84>
			
		set_bits(&RS_PORT, 1, RS_PIN); 
 286:	1f 92       	push	r1
 288:	ff 92       	push	r15
 28a:	ef 92       	push	r14
 28c:	1f 92       	push	r1
 28e:	df 92       	push	r13
 290:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>
 294:	8f e9       	ldi	r24, 0x9F	; 159
 296:	9f e0       	ldi	r25, 0x0F	; 15
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_write_string+0x3e>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_write_string+0x44>
 29e:	00 00       	nop
 2a0:	21 96       	adiw	r28, 0x01	; 1
		
		_delay_ms (1);
		
		put_lcd_data(*string);
 2a2:	f5 01       	movw	r30, r10
 2a4:	80 81       	ld	r24, Z
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>
		//while(get_lcd_busy_flag() > 0);	
					
		clear_bits(&RS_PORT, 1, RS_PIN);
 2ac:	1f 92       	push	r1
 2ae:	ff 92       	push	r15
 2b0:	ef 92       	push	r14
 2b2:	1f 92       	push	r1
 2b4:	df 92       	push	r13
 2b6:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
			
		if (cnt == 15)
 2ba:	8d b7       	in	r24, 0x3d	; 61
 2bc:	9e b7       	in	r25, 0x3e	; 62
 2be:	0a 96       	adiw	r24, 0x0a	; 10
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	9e bf       	out	0x3e, r25	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	8d bf       	out	0x3d, r24	; 61
 2ca:	0f 30       	cpi	r16, 0x0F	; 15
 2cc:	11 05       	cpc	r17, r1
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <lcd_write_string+0x7e>
		{
			//carriage return
		
		put_lcd_data(LCD_CARRIAGE_RETURN);
 2d0:	80 ec       	ldi	r24, 0xC0	; 192
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>
		//while(get_lcd_busy_flag() > 0);
		}
	//_delay_ms (150);
		string++;
		cnt++;
 2d8:	0f 5f       	subi	r16, 0xFF	; 255
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	d0 cf       	rjmp	.-96     	; 0x27e <lcd_write_string+0x24>
		
		
		}
	}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	bf 90       	pop	r11
 2ee:	af 90       	pop	r10
 2f0:	08 95       	ret

000002f2 <put_lcd_nibble>:
	
		
}

void put_lcd_nibble(uint8_t data)	
{
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
	set_bits(&PORTB, 1, EN); 
 2f6:	1f 92       	push	r1
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	8f 93       	push	r24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	8f 93       	push	r24
 300:	1f 92       	push	r1
 302:	85 e2       	ldi	r24, 0x25	; 37
 304:	8f 93       	push	r24
 306:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	81 ee       	ldi	r24, 0xE1	; 225
 30e:	94 e0       	ldi	r25, 0x04	; 4
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <put_lcd_nibble+0x1e>
 318:	00 c0       	rjmp	.+0      	; 0x31a <put_lcd_nibble+0x28>
 31a:	00 00       	nop
   _delay_ms (100);
	LCD_DATA &= ~((1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	8b b9       	out	0x0b, r24	; 11
	
	if ((data & BIT3) != 0)
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	c3 fd       	sbrc	r28, 3
		LCD_DATA |= (1 << LCD_D7);
 32e:	5f 9a       	sbi	0x0b, 7	; 11
	if ((data & BIT2) != 0)
 330:	c2 fd       	sbrc	r28, 2
		LCD_DATA |= (1 << LCD_D6);
 332:	5e 9a       	sbi	0x0b, 6	; 11
	if ((data & BIT1) != 0)
 334:	c1 fd       	sbrc	r28, 1
		LCD_DATA |= (1 << LCD_D5);
 336:	5d 9a       	sbi	0x0b, 5	; 11
	if ((data & BIT0) != 0)
 338:	c0 fd       	sbrc	r28, 0
		LCD_DATA |= (1 << LCD_D4);
 33a:	5c 9a       	sbi	0x0b, 4	; 11
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	81 ee       	ldi	r24, 0xE1	; 225
 340:	94 e0       	ldi	r25, 0x04	; 4
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <put_lcd_nibble+0x50>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <put_lcd_nibble+0x5a>
 34c:	00 00       	nop
	_delay_ms (100);
	clear_bits(&PORTB, 1, EN);
 34e:	1f 92       	push	r1
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	8f 93       	push	r24
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	8f 93       	push	r24
 358:	1f 92       	push	r1
 35a:	85 e2       	ldi	r24, 0x25	; 37
 35c:	8f 93       	push	r24
 35e:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
}	
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <debug_pin>:



void   debug_pin(uint8_t bit)                                                                        
{
		PORTB |= (1 << bit);
 370:	45 b1       	in	r20, 0x05	; 5
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <debug_pin+0xe>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <debug_pin+0xa>
 382:	cb 01       	movw	r24, r22
 384:	46 2b       	or	r20, r22
 386:	45 b9       	out	0x05, r20	; 5
 388:	7f ef       	ldi	r23, 0xFF	; 255
 38a:	23 ed       	ldi	r18, 0xD3	; 211
 38c:	30 e3       	ldi	r19, 0x30	; 48
 38e:	71 50       	subi	r23, 0x01	; 1
 390:	20 40       	sbci	r18, 0x00	; 0
 392:	30 40       	sbci	r19, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <debug_pin+0x1e>
 396:	00 c0       	rjmp	.+0      	; 0x398 <debug_pin+0x28>
 398:	00 00       	nop
		_delay_ms (1000);
		PORTB &= ~(1 << bit);
 39a:	95 b1       	in	r25, 0x05	; 5
 39c:	80 95       	com	r24
 39e:	89 23       	and	r24, r25
 3a0:	85 b9       	out	0x05, r24	; 5
 3a2:	4f ef       	ldi	r20, 0xFF	; 255
 3a4:	63 ed       	ldi	r22, 0xD3	; 211
 3a6:	70 e3       	ldi	r23, 0x30	; 48
 3a8:	41 50       	subi	r20, 0x01	; 1
 3aa:	60 40       	sbci	r22, 0x00	; 0
 3ac:	70 40       	sbci	r23, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <debug_pin+0x38>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <debug_pin+0x42>
 3b2:	00 00       	nop
 3b4:	08 95       	ret

000003b6 <get_lcd_busy_flag>:
#include <util/delay.h>



int get_lcd_busy_flag(void)
{
 3b6:	cf 93       	push	r28
	// TODO: add address counter

	uint8_t input_buffer = 0;
	
	DDRD &= ~( (1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));	// Set LCD Port Pins as Input
 3b8:	8a b1       	in	r24, 0x0a	; 10
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	8a b9       	out	0x0a, r24	; 10
		
	clear_bits(&RS_PORT, 1, RS_PIN);
 3be:	42 e0       	ldi	r20, 0x02	; 2
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	8b e2       	ldi	r24, 0x2B	; 43
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
	set_bits(&RW_PORT, 1, RW_PIN); 
 3ce:	43 e0       	ldi	r20, 0x03	; 3
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	8b e2       	ldi	r24, 0x2B	; 43
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>
 3de:	8f e9       	ldi	r24, 0x9F	; 159
 3e0:	9f e0       	ldi	r25, 0x0F	; 15
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <get_lcd_busy_flag+0x2c>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <get_lcd_busy_flag+0x32>
 3e8:	00 00       	nop
	_delay_ms (1);
	set_bits(&PORTB, 1, EN);
 3ea:	44 e0       	ldi	r20, 0x04	; 4
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	85 e2       	ldi	r24, 0x25	; 37
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>
 3fa:	8f e9       	ldi	r24, 0x9F	; 159
 3fc:	9f e0       	ldi	r25, 0x0F	; 15
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <get_lcd_busy_flag+0x48>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms (1);
		
	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
 406:	4f 9b       	sbis	0x09, 7	; 9
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		input_buffer |= (1 << 7);
 40a:	c0 e8       	ldi	r28, 0x80	; 128
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

int get_lcd_busy_flag(void)
{
	// TODO: add address counter

	uint8_t input_buffer = 0;
 40e:	c0 e0       	ldi	r28, 0x00	; 0
	set_bits(&PORTB, 1, EN);
	_delay_ms (1);
		
	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
		input_buffer |= (1 << 7);
	if ((LCD_DATA_IN & (1 << LCD_D6)) != 0)
 410:	4e 99       	sbic	0x09, 6	; 9
		input_buffer |= (1 << 6);
 412:	c0 64       	ori	r28, 0x40	; 64
	if ((LCD_DATA_IN & (1 << LCD_D5)) != 0)
 414:	4d 99       	sbic	0x09, 5	; 9
		input_buffer |= (1 << 5);
 416:	c0 62       	ori	r28, 0x20	; 32
	if ((LCD_DATA_IN & (1 << LCD_D4)) != 0)
 418:	4c 99       	sbic	0x09, 4	; 9
		input_buffer |= (1 << 4);
 41a:	c0 61       	ori	r28, 0x10	; 16
 41c:	8f e9       	ldi	r24, 0x9F	; 159
 41e:	9f e0       	ldi	r25, 0x0F	; 15
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
		
		_delay_ms (1);
	clear_bits(&PORTB, 1, EN);
 428:	44 e0       	ldi	r20, 0x04	; 4
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	85 e2       	ldi	r24, 0x25	; 37
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
 438:	8f e9       	ldi	r24, 0x9F	; 159
 43a:	9f e0       	ldi	r25, 0x0F	; 15
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
   _delay_ms (1);
	set_bits(&PORTB, 1, EN);
 444:	44 e0       	ldi	r20, 0x04	; 4
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	85 e2       	ldi	r24, 0x25	; 37
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 4b 00 	call	0x96	; 0x96 <set_bits>
 454:	8f e9       	ldi	r24, 0x9F	; 159
 456:	9f e0       	ldi	r25, 0x0F	; 15
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
	_delay_ms (1);
	
	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
 460:	4f 99       	sbic	0x09, 7	; 9
		input_buffer |= (1 << 3);
 462:	c8 60       	ori	r28, 0x08	; 8
	if ((LCD_DATA_IN & (1 << LCD_D6)) != 0)
 464:	4e 99       	sbic	0x09, 6	; 9
		input_buffer |= (1 << 2);
 466:	c4 60       	ori	r28, 0x04	; 4
	if ((LCD_DATA_IN & (1 << LCD_D5)) != 0)
 468:	4d 99       	sbic	0x09, 5	; 9
		input_buffer |= (1 << 1);
 46a:	c2 60       	ori	r28, 0x02	; 2
	if ((LCD_DATA_IN & (1 << LCD_D4)) != 0)
 46c:	4c 99       	sbic	0x09, 4	; 9
		input_buffer |= (1 << 0);
 46e:	c1 60       	ori	r28, 0x01	; 1
	
	clear_bits(&PORTB, 1, EN);
 470:	44 e0       	ldi	r20, 0x04	; 4
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	85 e2       	ldi	r24, 0x25	; 37
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
	
	clear_bits(&RW_PORT, 1, RW_PIN);
 480:	43 e0       	ldi	r20, 0x03	; 3
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	8b e2       	ldi	r24, 0x2B	; 43
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
	
	DDRD |= ((1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));	// Set LCD Port Pins as Output
 490:	8a b1       	in	r24, 0x0a	; 10
 492:	80 6f       	ori	r24, 0xF0	; 240
 494:	8a b9       	out	0x0a, r24	; 10


	return ( input_buffer & 0b10000000);
 496:	8c 2f       	mov	r24, r28
 498:	80 78       	andi	r24, 0x80	; 128
}
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <main>:
void put_lcd_nibble(uint8_t data);

*/


int main (void) {   
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	a8 97       	sbiw	r28, 0x28	; 40
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	89 ef       	ldi	r24, 0xF9	; 249
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x1a>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x24>
 4c4:	00 00       	nop
	
	_delay_ms (20);
		DDRB = 0xFF;             // (3)
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	84 b9       	out	0x04, r24	; 4
            
	DDRD = 0xFF;         // (2)
 4ca:	8a b9       	out	0x0a, r24	; 10

  
 
    clear_bits(&PORTD, 2, RS_PIN, RW_PIN);
 4cc:	23 e0       	ldi	r18, 0x03	; 3
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	42 e0       	ldi	r20, 0x02	; 2
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	8b e2       	ldi	r24, 0x2B	; 43
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 78 00 	call	0xf0	; 0xf0 <clear_bits>
 4e0:	8f e3       	ldi	r24, 0x3F	; 63
 4e2:	9c e9       	ldi	r25, 0x9C	; 156
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <main+0x44>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0x4a>
 4ea:	00 00       	nop
   _delay_ms (10); 
   
put_lcd_nibble(0x03);
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <put_lcd_nibble>
 4f4:	8f e0       	ldi	r24, 0x0F	; 15
 4f6:	90 e4       	ldi	r25, 0x40	; 64
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <main+0x58>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x5e>
 4fe:	00 00       	nop
_delay_ms (4.1);

put_lcd_nibble(0x03);
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 79 01 	call	0x2f2	; 0x2f2 <put_lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 508:	8f e8       	ldi	r24, 0x8F	; 143
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <main+0x6c>
 510:	00 c0       	rjmp	.+0      	; 0x512 <main+0x72>
 512:	00 00       	nop

              



put_lcd_nibble(0x03);
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 79 01 	call	0x2f2	; 0x2f2 <put_lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	8f e0       	ldi	r24, 0x0F	; 15
 51e:	90 e4       	ldi	r25, 0x40	; 64
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <main+0x80>
 524:	00 c0       	rjmp	.+0      	; 0x526 <main+0x86>
 526:	00 00       	nop
_delay_ms (4.1);
put_lcd_nibble(0x02);
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <put_lcd_nibble>
 530:	8f e0       	ldi	r24, 0x0F	; 15
 532:	90 e4       	ldi	r25, 0x40	; 64
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <main+0x94>
 538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x9a>
 53a:	00 00       	nop
_delay_ms (4.1);

put_lcd_data(LCD_FUNCTION_SET | LCD_SET_4BIT_MODE | LCD_SET_2LINE_MODE | LCD_FONT_5X8_MODE);	
 53c:	88 e2       	ldi	r24, 0x28	; 40
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>

put_lcd_data(LCD_DISPLAY_OFF);
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>

put_lcd_data(LCD_CLEAR_DISPLAY);	
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>

//Entry Mode

put_lcd_data(LCD_ENTRY_MODE | LCD_CURSOR_INC_DIR_RIGHT| LCD_SHIFT_OFF);
 554:	86 e0       	ldi	r24, 0x06	; 6
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>


put_lcd_data(LCD_DISPLAY_ON | LCD_CURSOR_ON | LCD_CURSOR_BLINK_ON);
 55c:	8f e0       	ldi	r24, 0x0F	; 15
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>
int zahl = 0x55;




   	lcd_write_string("Na das war aber eine schwere Geburt");
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write_string>
 56c:	9f ef       	ldi	r25, 0xFF	; 255
 56e:	27 ea       	ldi	r18, 0xA7	; 167
 570:	81 e6       	ldi	r24, 0x61	; 97
 572:	91 50       	subi	r25, 0x01	; 1
 574:	20 40       	sbci	r18, 0x00	; 0
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <main+0xd2>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0xdc>
 57c:	00 00       	nop
   	 _delay_ms (2000);
         
   	put_lcd_data(LCD_CLEAR_DISPLAY);
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>
  
   	
	lcd_write_string("Und das alles wegen einem schlechten Datenblatt...");
 586:	84 e2       	ldi	r24, 0x24	; 36
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write_string>
 58e:	9f ef       	ldi	r25, 0xFF	; 255
 590:	27 ea       	ldi	r18, 0xA7	; 167
 592:	81 e6       	ldi	r24, 0x61	; 97
 594:	91 50       	subi	r25, 0x01	; 1
 596:	20 40       	sbci	r18, 0x00	; 0
 598:	80 40       	sbci	r24, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <main+0xf4>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <main+0xfe>
 59e:	00 00       	nop
	_delay_ms (2000);
	put_lcd_data(LCD_CLEAR_DISPLAY);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>
	
	
	sprintf(formatted_string, "DMSG: PORTB:%x",PORTB);
 5a8:	85 b1       	in	r24, 0x05	; 5
 5aa:	1f 92       	push	r1
 5ac:	8f 93       	push	r24
 5ae:	87 e5       	ldi	r24, 0x57	; 87
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	9f 93       	push	r25
 5b4:	8f 93       	push	r24
 5b6:	8e 01       	movw	r16, r28
 5b8:	0f 5f       	subi	r16, 0xFF	; 255
 5ba:	1f 4f       	sbci	r17, 0xFF	; 255
 5bc:	1f 93       	push	r17
 5be:	0f 93       	push	r16
 5c0:	0e 94 2b 03 	call	0x656	; 0x656 <sprintf>
	lcd_write_string(formatted_string);
 5c4:	c8 01       	movw	r24, r16
 5c6:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write_string>
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
 5cc:	27 ea       	ldi	r18, 0xA7	; 167
 5ce:	81 e6       	ldi	r24, 0x61	; 97
 5d0:	91 50       	subi	r25, 0x01	; 1
 5d2:	20 40       	sbci	r18, 0x00	; 0
 5d4:	80 40       	sbci	r24, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x130>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x13a>
 5da:	00 00       	nop
	_delay_ms (2000);
	
		
	DDRB &=	~(1 << SENSOR);
 5dc:	22 98       	cbi	0x04, 2	; 4
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	29 ef       	ldi	r18, 0xF9	; 249
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	20 40       	sbci	r18, 0x00	; 0
 5e8:	80 40       	sbci	r24, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <main+0x144>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <main+0x14e>
 5ee:	00 00       	nop
	_delay_ms (20);
	
		
	put_lcd_data(LCD_CLEAR_DISPLAY);	
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
		
	while(1) {                
     
        debug_pin(PORTB0);
        
	sprintf(formatted_string, "SENSOR: %x",(PINB & (1 << PINB2)));
 604:	86 e6       	ldi	r24, 0x66	; 102
 606:	e8 2e       	mov	r14, r24
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	f8 2e       	mov	r15, r24
	put_lcd_data(LCD_CLEAR_DISPLAY);	
		
		
	while(1) {                
     
        debug_pin(PORTB0);
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 b8 01 	call	0x370	; 0x370 <debug_pin>
        
	sprintf(formatted_string, "SENSOR: %x",(PINB & (1 << PINB2)));
 614:	83 b1       	in	r24, 0x03	; 3
 616:	84 70       	andi	r24, 0x04	; 4
 618:	1f 92       	push	r1
 61a:	8f 93       	push	r24
 61c:	ff 92       	push	r15
 61e:	ef 92       	push	r14
 620:	1f 93       	push	r17
 622:	0f 93       	push	r16
 624:	0e 94 2b 03 	call	0x656	; 0x656 <sprintf>
	lcd_write_string(formatted_string);
 628:	c8 01       	movw	r24, r16
 62a:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write_string>
	
	put_lcd_data(LCD_CARRIAGE_RETURN);
 62e:	80 ec       	ldi	r24, 0xC0	; 192
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 a4 00 	call	0x148	; 0x148 <put_lcd_data>
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	23 ed       	ldi	r18, 0xD3	; 211
 63a:	80 e3       	ldi	r24, 0x30	; 48
 63c:	91 50       	subi	r25, 0x01	; 1
 63e:	20 40       	sbci	r18, 0x00	; 0
 640:	80 40       	sbci	r24, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <main+0x19c>
 644:	00 c0       	rjmp	.+0      	; 0x646 <main+0x1a6>
 646:	00 00       	nop
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	db cf       	rjmp	.-74     	; 0x60c <main+0x16c>

00000656 <sprintf>:
 656:	ae e0       	ldi	r26, 0x0E	; 14
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e1 e3       	ldi	r30, 0x31	; 49
 65c:	f3 e0       	ldi	r31, 0x03	; 3
 65e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__prologue_saves__+0x1c>
 662:	0d 89       	ldd	r16, Y+21	; 0x15
 664:	1e 89       	ldd	r17, Y+22	; 0x16
 666:	86 e0       	ldi	r24, 0x06	; 6
 668:	8c 83       	std	Y+4, r24	; 0x04
 66a:	1a 83       	std	Y+2, r17	; 0x02
 66c:	09 83       	std	Y+1, r16	; 0x01
 66e:	8f ef       	ldi	r24, 0xFF	; 255
 670:	9f e7       	ldi	r25, 0x7F	; 127
 672:	9e 83       	std	Y+6, r25	; 0x06
 674:	8d 83       	std	Y+5, r24	; 0x05
 676:	ae 01       	movw	r20, r28
 678:	47 5e       	subi	r20, 0xE7	; 231
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	6f 89       	ldd	r22, Y+23	; 0x17
 67e:	78 8d       	ldd	r23, Y+24	; 0x18
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	0e 94 4d 03 	call	0x69a	; 0x69a <vfprintf>
 688:	ef 81       	ldd	r30, Y+7	; 0x07
 68a:	f8 85       	ldd	r31, Y+8	; 0x08
 68c:	e0 0f       	add	r30, r16
 68e:	f1 1f       	adc	r31, r17
 690:	10 82       	st	Z, r1
 692:	2e 96       	adiw	r28, 0x0e	; 14
 694:	e4 e0       	ldi	r30, 0x04	; 4
 696:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__epilogue_restores__+0x1c>

0000069a <vfprintf>:
 69a:	ab e0       	ldi	r26, 0x0B	; 11
 69c:	b0 e0       	ldi	r27, 0x00	; 0
 69e:	e3 e5       	ldi	r30, 0x53	; 83
 6a0:	f3 e0       	ldi	r31, 0x03	; 3
 6a2:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__prologue_saves__>
 6a6:	6c 01       	movw	r12, r24
 6a8:	7b 01       	movw	r14, r22
 6aa:	8a 01       	movw	r16, r20
 6ac:	fc 01       	movw	r30, r24
 6ae:	17 82       	std	Z+7, r1	; 0x07
 6b0:	16 82       	std	Z+6, r1	; 0x06
 6b2:	83 81       	ldd	r24, Z+3	; 0x03
 6b4:	81 ff       	sbrs	r24, 1
 6b6:	cc c1       	rjmp	.+920    	; 0xa50 <__stack+0x151>
 6b8:	ce 01       	movw	r24, r28
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	3c 01       	movw	r6, r24
 6be:	f6 01       	movw	r30, r12
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	f7 01       	movw	r30, r14
 6c4:	93 fd       	sbrc	r25, 3
 6c6:	85 91       	lpm	r24, Z+
 6c8:	93 ff       	sbrs	r25, 3
 6ca:	81 91       	ld	r24, Z+
 6cc:	7f 01       	movw	r14, r30
 6ce:	88 23       	and	r24, r24
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <vfprintf+0x3a>
 6d2:	ba c1       	rjmp	.+884    	; 0xa48 <__stack+0x149>
 6d4:	85 32       	cpi	r24, 0x25	; 37
 6d6:	39 f4       	brne	.+14     	; 0x6e6 <vfprintf+0x4c>
 6d8:	93 fd       	sbrc	r25, 3
 6da:	85 91       	lpm	r24, Z+
 6dc:	93 ff       	sbrs	r25, 3
 6de:	81 91       	ld	r24, Z+
 6e0:	7f 01       	movw	r14, r30
 6e2:	85 32       	cpi	r24, 0x25	; 37
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <vfprintf+0x56>
 6e6:	b6 01       	movw	r22, r12
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 6ee:	e7 cf       	rjmp	.-50     	; 0x6be <vfprintf+0x24>
 6f0:	91 2c       	mov	r9, r1
 6f2:	21 2c       	mov	r2, r1
 6f4:	31 2c       	mov	r3, r1
 6f6:	ff e1       	ldi	r31, 0x1F	; 31
 6f8:	f3 15       	cp	r31, r3
 6fa:	d8 f0       	brcs	.+54     	; 0x732 <vfprintf+0x98>
 6fc:	8b 32       	cpi	r24, 0x2B	; 43
 6fe:	79 f0       	breq	.+30     	; 0x71e <vfprintf+0x84>
 700:	38 f4       	brcc	.+14     	; 0x710 <vfprintf+0x76>
 702:	80 32       	cpi	r24, 0x20	; 32
 704:	79 f0       	breq	.+30     	; 0x724 <vfprintf+0x8a>
 706:	83 32       	cpi	r24, 0x23	; 35
 708:	a1 f4       	brne	.+40     	; 0x732 <vfprintf+0x98>
 70a:	23 2d       	mov	r18, r3
 70c:	20 61       	ori	r18, 0x10	; 16
 70e:	1d c0       	rjmp	.+58     	; 0x74a <vfprintf+0xb0>
 710:	8d 32       	cpi	r24, 0x2D	; 45
 712:	61 f0       	breq	.+24     	; 0x72c <vfprintf+0x92>
 714:	80 33       	cpi	r24, 0x30	; 48
 716:	69 f4       	brne	.+26     	; 0x732 <vfprintf+0x98>
 718:	23 2d       	mov	r18, r3
 71a:	21 60       	ori	r18, 0x01	; 1
 71c:	16 c0       	rjmp	.+44     	; 0x74a <vfprintf+0xb0>
 71e:	83 2d       	mov	r24, r3
 720:	82 60       	ori	r24, 0x02	; 2
 722:	38 2e       	mov	r3, r24
 724:	e3 2d       	mov	r30, r3
 726:	e4 60       	ori	r30, 0x04	; 4
 728:	3e 2e       	mov	r3, r30
 72a:	2a c0       	rjmp	.+84     	; 0x780 <vfprintf+0xe6>
 72c:	f3 2d       	mov	r31, r3
 72e:	f8 60       	ori	r31, 0x08	; 8
 730:	1d c0       	rjmp	.+58     	; 0x76c <vfprintf+0xd2>
 732:	37 fc       	sbrc	r3, 7
 734:	2d c0       	rjmp	.+90     	; 0x790 <vfprintf+0xf6>
 736:	20 ed       	ldi	r18, 0xD0	; 208
 738:	28 0f       	add	r18, r24
 73a:	2a 30       	cpi	r18, 0x0A	; 10
 73c:	40 f0       	brcs	.+16     	; 0x74e <vfprintf+0xb4>
 73e:	8e 32       	cpi	r24, 0x2E	; 46
 740:	b9 f4       	brne	.+46     	; 0x770 <vfprintf+0xd6>
 742:	36 fc       	sbrc	r3, 6
 744:	81 c1       	rjmp	.+770    	; 0xa48 <__stack+0x149>
 746:	23 2d       	mov	r18, r3
 748:	20 64       	ori	r18, 0x40	; 64
 74a:	32 2e       	mov	r3, r18
 74c:	19 c0       	rjmp	.+50     	; 0x780 <vfprintf+0xe6>
 74e:	36 fe       	sbrs	r3, 6
 750:	06 c0       	rjmp	.+12     	; 0x75e <vfprintf+0xc4>
 752:	8a e0       	ldi	r24, 0x0A	; 10
 754:	98 9e       	mul	r9, r24
 756:	20 0d       	add	r18, r0
 758:	11 24       	eor	r1, r1
 75a:	92 2e       	mov	r9, r18
 75c:	11 c0       	rjmp	.+34     	; 0x780 <vfprintf+0xe6>
 75e:	ea e0       	ldi	r30, 0x0A	; 10
 760:	2e 9e       	mul	r2, r30
 762:	20 0d       	add	r18, r0
 764:	11 24       	eor	r1, r1
 766:	22 2e       	mov	r2, r18
 768:	f3 2d       	mov	r31, r3
 76a:	f0 62       	ori	r31, 0x20	; 32
 76c:	3f 2e       	mov	r3, r31
 76e:	08 c0       	rjmp	.+16     	; 0x780 <vfprintf+0xe6>
 770:	8c 36       	cpi	r24, 0x6C	; 108
 772:	21 f4       	brne	.+8      	; 0x77c <vfprintf+0xe2>
 774:	83 2d       	mov	r24, r3
 776:	80 68       	ori	r24, 0x80	; 128
 778:	38 2e       	mov	r3, r24
 77a:	02 c0       	rjmp	.+4      	; 0x780 <vfprintf+0xe6>
 77c:	88 36       	cpi	r24, 0x68	; 104
 77e:	41 f4       	brne	.+16     	; 0x790 <vfprintf+0xf6>
 780:	f7 01       	movw	r30, r14
 782:	93 fd       	sbrc	r25, 3
 784:	85 91       	lpm	r24, Z+
 786:	93 ff       	sbrs	r25, 3
 788:	81 91       	ld	r24, Z+
 78a:	7f 01       	movw	r14, r30
 78c:	81 11       	cpse	r24, r1
 78e:	b3 cf       	rjmp	.-154    	; 0x6f6 <vfprintf+0x5c>
 790:	98 2f       	mov	r25, r24
 792:	9f 7d       	andi	r25, 0xDF	; 223
 794:	95 54       	subi	r25, 0x45	; 69
 796:	93 30       	cpi	r25, 0x03	; 3
 798:	28 f4       	brcc	.+10     	; 0x7a4 <vfprintf+0x10a>
 79a:	0c 5f       	subi	r16, 0xFC	; 252
 79c:	1f 4f       	sbci	r17, 0xFF	; 255
 79e:	9f e3       	ldi	r25, 0x3F	; 63
 7a0:	99 83       	std	Y+1, r25	; 0x01
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <vfprintf+0x124>
 7a4:	83 36       	cpi	r24, 0x63	; 99
 7a6:	31 f0       	breq	.+12     	; 0x7b4 <vfprintf+0x11a>
 7a8:	83 37       	cpi	r24, 0x73	; 115
 7aa:	71 f0       	breq	.+28     	; 0x7c8 <vfprintf+0x12e>
 7ac:	83 35       	cpi	r24, 0x53	; 83
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <vfprintf+0x118>
 7b0:	59 c0       	rjmp	.+178    	; 0x864 <vfprintf+0x1ca>
 7b2:	21 c0       	rjmp	.+66     	; 0x7f6 <vfprintf+0x15c>
 7b4:	f8 01       	movw	r30, r16
 7b6:	80 81       	ld	r24, Z
 7b8:	89 83       	std	Y+1, r24	; 0x01
 7ba:	0e 5f       	subi	r16, 0xFE	; 254
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	88 24       	eor	r8, r8
 7c0:	83 94       	inc	r8
 7c2:	91 2c       	mov	r9, r1
 7c4:	53 01       	movw	r10, r6
 7c6:	13 c0       	rjmp	.+38     	; 0x7ee <vfprintf+0x154>
 7c8:	28 01       	movw	r4, r16
 7ca:	f2 e0       	ldi	r31, 0x02	; 2
 7cc:	4f 0e       	add	r4, r31
 7ce:	51 1c       	adc	r5, r1
 7d0:	f8 01       	movw	r30, r16
 7d2:	a0 80       	ld	r10, Z
 7d4:	b1 80       	ldd	r11, Z+1	; 0x01
 7d6:	36 fe       	sbrs	r3, 6
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <vfprintf+0x146>
 7da:	69 2d       	mov	r22, r9
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x14a>
 7e0:	6f ef       	ldi	r22, 0xFF	; 255
 7e2:	7f ef       	ldi	r23, 0xFF	; 255
 7e4:	c5 01       	movw	r24, r10
 7e6:	0e 94 39 05 	call	0xa72	; 0xa72 <strnlen>
 7ea:	4c 01       	movw	r8, r24
 7ec:	82 01       	movw	r16, r4
 7ee:	f3 2d       	mov	r31, r3
 7f0:	ff 77       	andi	r31, 0x7F	; 127
 7f2:	3f 2e       	mov	r3, r31
 7f4:	16 c0       	rjmp	.+44     	; 0x822 <vfprintf+0x188>
 7f6:	28 01       	movw	r4, r16
 7f8:	22 e0       	ldi	r18, 0x02	; 2
 7fa:	42 0e       	add	r4, r18
 7fc:	51 1c       	adc	r5, r1
 7fe:	f8 01       	movw	r30, r16
 800:	a0 80       	ld	r10, Z
 802:	b1 80       	ldd	r11, Z+1	; 0x01
 804:	36 fe       	sbrs	r3, 6
 806:	03 c0       	rjmp	.+6      	; 0x80e <vfprintf+0x174>
 808:	69 2d       	mov	r22, r9
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <vfprintf+0x178>
 80e:	6f ef       	ldi	r22, 0xFF	; 255
 810:	7f ef       	ldi	r23, 0xFF	; 255
 812:	c5 01       	movw	r24, r10
 814:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strnlen_P>
 818:	4c 01       	movw	r8, r24
 81a:	f3 2d       	mov	r31, r3
 81c:	f0 68       	ori	r31, 0x80	; 128
 81e:	3f 2e       	mov	r3, r31
 820:	82 01       	movw	r16, r4
 822:	33 fc       	sbrc	r3, 3
 824:	1b c0       	rjmp	.+54     	; 0x85c <vfprintf+0x1c2>
 826:	82 2d       	mov	r24, r2
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	88 16       	cp	r8, r24
 82c:	99 06       	cpc	r9, r25
 82e:	b0 f4       	brcc	.+44     	; 0x85c <vfprintf+0x1c2>
 830:	b6 01       	movw	r22, r12
 832:	80 e2       	ldi	r24, 0x20	; 32
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 83a:	2a 94       	dec	r2
 83c:	f4 cf       	rjmp	.-24     	; 0x826 <vfprintf+0x18c>
 83e:	f5 01       	movw	r30, r10
 840:	37 fc       	sbrc	r3, 7
 842:	85 91       	lpm	r24, Z+
 844:	37 fe       	sbrs	r3, 7
 846:	81 91       	ld	r24, Z+
 848:	5f 01       	movw	r10, r30
 84a:	b6 01       	movw	r22, r12
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 852:	21 10       	cpse	r2, r1
 854:	2a 94       	dec	r2
 856:	21 e0       	ldi	r18, 0x01	; 1
 858:	82 1a       	sub	r8, r18
 85a:	91 08       	sbc	r9, r1
 85c:	81 14       	cp	r8, r1
 85e:	91 04       	cpc	r9, r1
 860:	71 f7       	brne	.-36     	; 0x83e <vfprintf+0x1a4>
 862:	e8 c0       	rjmp	.+464    	; 0xa34 <__stack+0x135>
 864:	84 36       	cpi	r24, 0x64	; 100
 866:	11 f0       	breq	.+4      	; 0x86c <vfprintf+0x1d2>
 868:	89 36       	cpi	r24, 0x69	; 105
 86a:	41 f5       	brne	.+80     	; 0x8bc <vfprintf+0x222>
 86c:	f8 01       	movw	r30, r16
 86e:	37 fe       	sbrs	r3, 7
 870:	07 c0       	rjmp	.+14     	; 0x880 <vfprintf+0x1e6>
 872:	60 81       	ld	r22, Z
 874:	71 81       	ldd	r23, Z+1	; 0x01
 876:	82 81       	ldd	r24, Z+2	; 0x02
 878:	93 81       	ldd	r25, Z+3	; 0x03
 87a:	0c 5f       	subi	r16, 0xFC	; 252
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	08 c0       	rjmp	.+16     	; 0x890 <vfprintf+0x1f6>
 880:	60 81       	ld	r22, Z
 882:	71 81       	ldd	r23, Z+1	; 0x01
 884:	07 2e       	mov	r0, r23
 886:	00 0c       	add	r0, r0
 888:	88 0b       	sbc	r24, r24
 88a:	99 0b       	sbc	r25, r25
 88c:	0e 5f       	subi	r16, 0xFE	; 254
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	f3 2d       	mov	r31, r3
 892:	ff 76       	andi	r31, 0x6F	; 111
 894:	3f 2e       	mov	r3, r31
 896:	97 ff       	sbrs	r25, 7
 898:	09 c0       	rjmp	.+18     	; 0x8ac <vfprintf+0x212>
 89a:	90 95       	com	r25
 89c:	80 95       	com	r24
 89e:	70 95       	com	r23
 8a0:	61 95       	neg	r22
 8a2:	7f 4f       	sbci	r23, 0xFF	; 255
 8a4:	8f 4f       	sbci	r24, 0xFF	; 255
 8a6:	9f 4f       	sbci	r25, 0xFF	; 255
 8a8:	f0 68       	ori	r31, 0x80	; 128
 8aa:	3f 2e       	mov	r3, r31
 8ac:	2a e0       	ldi	r18, 0x0A	; 10
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	a3 01       	movw	r20, r6
 8b2:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 8b6:	88 2e       	mov	r8, r24
 8b8:	86 18       	sub	r8, r6
 8ba:	45 c0       	rjmp	.+138    	; 0x946 <__stack+0x47>
 8bc:	85 37       	cpi	r24, 0x75	; 117
 8be:	31 f4       	brne	.+12     	; 0x8cc <vfprintf+0x232>
 8c0:	23 2d       	mov	r18, r3
 8c2:	2f 7e       	andi	r18, 0xEF	; 239
 8c4:	b2 2e       	mov	r11, r18
 8c6:	2a e0       	ldi	r18, 0x0A	; 10
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	25 c0       	rjmp	.+74     	; 0x916 <__stack+0x17>
 8cc:	93 2d       	mov	r25, r3
 8ce:	99 7f       	andi	r25, 0xF9	; 249
 8d0:	b9 2e       	mov	r11, r25
 8d2:	8f 36       	cpi	r24, 0x6F	; 111
 8d4:	c1 f0       	breq	.+48     	; 0x906 <__stack+0x7>
 8d6:	18 f4       	brcc	.+6      	; 0x8de <vfprintf+0x244>
 8d8:	88 35       	cpi	r24, 0x58	; 88
 8da:	79 f0       	breq	.+30     	; 0x8fa <vfprintf+0x260>
 8dc:	b5 c0       	rjmp	.+362    	; 0xa48 <__stack+0x149>
 8de:	80 37       	cpi	r24, 0x70	; 112
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <vfprintf+0x24e>
 8e2:	88 37       	cpi	r24, 0x78	; 120
 8e4:	21 f0       	breq	.+8      	; 0x8ee <vfprintf+0x254>
 8e6:	b0 c0       	rjmp	.+352    	; 0xa48 <__stack+0x149>
 8e8:	e9 2f       	mov	r30, r25
 8ea:	e0 61       	ori	r30, 0x10	; 16
 8ec:	be 2e       	mov	r11, r30
 8ee:	b4 fe       	sbrs	r11, 4
 8f0:	0d c0       	rjmp	.+26     	; 0x90c <__stack+0xd>
 8f2:	fb 2d       	mov	r31, r11
 8f4:	f4 60       	ori	r31, 0x04	; 4
 8f6:	bf 2e       	mov	r11, r31
 8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>
 8fa:	34 fe       	sbrs	r3, 4
 8fc:	0a c0       	rjmp	.+20     	; 0x912 <__stack+0x13>
 8fe:	29 2f       	mov	r18, r25
 900:	26 60       	ori	r18, 0x06	; 6
 902:	b2 2e       	mov	r11, r18
 904:	06 c0       	rjmp	.+12     	; 0x912 <__stack+0x13>
 906:	28 e0       	ldi	r18, 0x08	; 8
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
 90c:	20 e1       	ldi	r18, 0x10	; 16
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0x17>
 912:	20 e1       	ldi	r18, 0x10	; 16
 914:	32 e0       	ldi	r19, 0x02	; 2
 916:	f8 01       	movw	r30, r16
 918:	b7 fe       	sbrs	r11, 7
 91a:	07 c0       	rjmp	.+14     	; 0x92a <__stack+0x2b>
 91c:	60 81       	ld	r22, Z
 91e:	71 81       	ldd	r23, Z+1	; 0x01
 920:	82 81       	ldd	r24, Z+2	; 0x02
 922:	93 81       	ldd	r25, Z+3	; 0x03
 924:	0c 5f       	subi	r16, 0xFC	; 252
 926:	1f 4f       	sbci	r17, 0xFF	; 255
 928:	06 c0       	rjmp	.+12     	; 0x936 <__stack+0x37>
 92a:	60 81       	ld	r22, Z
 92c:	71 81       	ldd	r23, Z+1	; 0x01
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 5f       	subi	r16, 0xFE	; 254
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	a3 01       	movw	r20, r6
 938:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 93c:	88 2e       	mov	r8, r24
 93e:	86 18       	sub	r8, r6
 940:	fb 2d       	mov	r31, r11
 942:	ff 77       	andi	r31, 0x7F	; 127
 944:	3f 2e       	mov	r3, r31
 946:	36 fe       	sbrs	r3, 6
 948:	0d c0       	rjmp	.+26     	; 0x964 <__stack+0x65>
 94a:	23 2d       	mov	r18, r3
 94c:	2e 7f       	andi	r18, 0xFE	; 254
 94e:	a2 2e       	mov	r10, r18
 950:	89 14       	cp	r8, r9
 952:	58 f4       	brcc	.+22     	; 0x96a <__stack+0x6b>
 954:	34 fe       	sbrs	r3, 4
 956:	0b c0       	rjmp	.+22     	; 0x96e <__stack+0x6f>
 958:	32 fc       	sbrc	r3, 2
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__stack+0x6f>
 95c:	83 2d       	mov	r24, r3
 95e:	8e 7e       	andi	r24, 0xEE	; 238
 960:	a8 2e       	mov	r10, r24
 962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x6f>
 964:	b8 2c       	mov	r11, r8
 966:	a3 2c       	mov	r10, r3
 968:	03 c0       	rjmp	.+6      	; 0x970 <__stack+0x71>
 96a:	b8 2c       	mov	r11, r8
 96c:	01 c0       	rjmp	.+2      	; 0x970 <__stack+0x71>
 96e:	b9 2c       	mov	r11, r9
 970:	a4 fe       	sbrs	r10, 4
 972:	0f c0       	rjmp	.+30     	; 0x992 <__stack+0x93>
 974:	fe 01       	movw	r30, r28
 976:	e8 0d       	add	r30, r8
 978:	f1 1d       	adc	r31, r1
 97a:	80 81       	ld	r24, Z
 97c:	80 33       	cpi	r24, 0x30	; 48
 97e:	21 f4       	brne	.+8      	; 0x988 <__stack+0x89>
 980:	9a 2d       	mov	r25, r10
 982:	99 7e       	andi	r25, 0xE9	; 233
 984:	a9 2e       	mov	r10, r25
 986:	09 c0       	rjmp	.+18     	; 0x99a <__stack+0x9b>
 988:	a2 fe       	sbrs	r10, 2
 98a:	06 c0       	rjmp	.+12     	; 0x998 <__stack+0x99>
 98c:	b3 94       	inc	r11
 98e:	b3 94       	inc	r11
 990:	04 c0       	rjmp	.+8      	; 0x99a <__stack+0x9b>
 992:	8a 2d       	mov	r24, r10
 994:	86 78       	andi	r24, 0x86	; 134
 996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x9b>
 998:	b3 94       	inc	r11
 99a:	a3 fc       	sbrc	r10, 3
 99c:	11 c0       	rjmp	.+34     	; 0x9c0 <__stack+0xc1>
 99e:	a0 fe       	sbrs	r10, 0
 9a0:	06 c0       	rjmp	.+12     	; 0x9ae <__stack+0xaf>
 9a2:	b2 14       	cp	r11, r2
 9a4:	88 f4       	brcc	.+34     	; 0x9c8 <__stack+0xc9>
 9a6:	28 0c       	add	r2, r8
 9a8:	92 2c       	mov	r9, r2
 9aa:	9b 18       	sub	r9, r11
 9ac:	0e c0       	rjmp	.+28     	; 0x9ca <__stack+0xcb>
 9ae:	b2 14       	cp	r11, r2
 9b0:	60 f4       	brcc	.+24     	; 0x9ca <__stack+0xcb>
 9b2:	b6 01       	movw	r22, r12
 9b4:	80 e2       	ldi	r24, 0x20	; 32
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 9bc:	b3 94       	inc	r11
 9be:	f7 cf       	rjmp	.-18     	; 0x9ae <__stack+0xaf>
 9c0:	b2 14       	cp	r11, r2
 9c2:	18 f4       	brcc	.+6      	; 0x9ca <__stack+0xcb>
 9c4:	2b 18       	sub	r2, r11
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__stack+0xcd>
 9c8:	98 2c       	mov	r9, r8
 9ca:	21 2c       	mov	r2, r1
 9cc:	a4 fe       	sbrs	r10, 4
 9ce:	10 c0       	rjmp	.+32     	; 0x9f0 <__stack+0xf1>
 9d0:	b6 01       	movw	r22, r12
 9d2:	80 e3       	ldi	r24, 0x30	; 48
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 9da:	a2 fe       	sbrs	r10, 2
 9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__stack+0x10d>
 9de:	a1 fc       	sbrc	r10, 1
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <__stack+0xe9>
 9e2:	88 e7       	ldi	r24, 0x78	; 120
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__stack+0xed>
 9e8:	88 e5       	ldi	r24, 0x58	; 88
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	b6 01       	movw	r22, r12
 9ee:	0c c0       	rjmp	.+24     	; 0xa08 <__stack+0x109>
 9f0:	8a 2d       	mov	r24, r10
 9f2:	86 78       	andi	r24, 0x86	; 134
 9f4:	59 f0       	breq	.+22     	; 0xa0c <__stack+0x10d>
 9f6:	a1 fe       	sbrs	r10, 1
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	8b e2       	ldi	r24, 0x2B	; 43
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__stack+0x101>
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	a7 fc       	sbrc	r10, 7
 a02:	8d e2       	ldi	r24, 0x2D	; 45
 a04:	b6 01       	movw	r22, r12
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 a0c:	89 14       	cp	r8, r9
 a0e:	38 f4       	brcc	.+14     	; 0xa1e <__stack+0x11f>
 a10:	b6 01       	movw	r22, r12
 a12:	80 e3       	ldi	r24, 0x30	; 48
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 a1a:	9a 94       	dec	r9
 a1c:	f7 cf       	rjmp	.-18     	; 0xa0c <__stack+0x10d>
 a1e:	8a 94       	dec	r8
 a20:	f3 01       	movw	r30, r6
 a22:	e8 0d       	add	r30, r8
 a24:	f1 1d       	adc	r31, r1
 a26:	80 81       	ld	r24, Z
 a28:	b6 01       	movw	r22, r12
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 a30:	81 10       	cpse	r8, r1
 a32:	f5 cf       	rjmp	.-22     	; 0xa1e <__stack+0x11f>
 a34:	22 20       	and	r2, r2
 a36:	09 f4       	brne	.+2      	; 0xa3a <__stack+0x13b>
 a38:	42 ce       	rjmp	.-892    	; 0x6be <vfprintf+0x24>
 a3a:	b6 01       	movw	r22, r12
 a3c:	80 e2       	ldi	r24, 0x20	; 32
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 44 05 	call	0xa88	; 0xa88 <fputc>
 a44:	2a 94       	dec	r2
 a46:	f6 cf       	rjmp	.-20     	; 0xa34 <__stack+0x135>
 a48:	f6 01       	movw	r30, r12
 a4a:	86 81       	ldd	r24, Z+6	; 0x06
 a4c:	97 81       	ldd	r25, Z+7	; 0x07
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <__stack+0x155>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	2b 96       	adiw	r28, 0x0b	; 11
 a56:	e2 e1       	ldi	r30, 0x12	; 18
 a58:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__epilogue_restores__>

00000a5c <strnlen_P>:
 a5c:	fc 01       	movw	r30, r24
 a5e:	05 90       	lpm	r0, Z+
 a60:	61 50       	subi	r22, 0x01	; 1
 a62:	70 40       	sbci	r23, 0x00	; 0
 a64:	01 10       	cpse	r0, r1
 a66:	d8 f7       	brcc	.-10     	; 0xa5e <strnlen_P+0x2>
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	8e 0f       	add	r24, r30
 a6e:	9f 1f       	adc	r25, r31
 a70:	08 95       	ret

00000a72 <strnlen>:
 a72:	fc 01       	movw	r30, r24
 a74:	61 50       	subi	r22, 0x01	; 1
 a76:	70 40       	sbci	r23, 0x00	; 0
 a78:	01 90       	ld	r0, Z+
 a7a:	01 10       	cpse	r0, r1
 a7c:	d8 f7       	brcc	.-10     	; 0xa74 <strnlen+0x2>
 a7e:	80 95       	com	r24
 a80:	90 95       	com	r25
 a82:	8e 0f       	add	r24, r30
 a84:	9f 1f       	adc	r25, r31
 a86:	08 95       	ret

00000a88 <fputc>:
 a88:	0f 93       	push	r16
 a8a:	1f 93       	push	r17
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
 a90:	fb 01       	movw	r30, r22
 a92:	23 81       	ldd	r18, Z+3	; 0x03
 a94:	21 fd       	sbrc	r18, 1
 a96:	03 c0       	rjmp	.+6      	; 0xa9e <fputc+0x16>
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	9f ef       	ldi	r25, 0xFF	; 255
 a9c:	2c c0       	rjmp	.+88     	; 0xaf6 <fputc+0x6e>
 a9e:	22 ff       	sbrs	r18, 2
 aa0:	16 c0       	rjmp	.+44     	; 0xace <fputc+0x46>
 aa2:	46 81       	ldd	r20, Z+6	; 0x06
 aa4:	57 81       	ldd	r21, Z+7	; 0x07
 aa6:	24 81       	ldd	r18, Z+4	; 0x04
 aa8:	35 81       	ldd	r19, Z+5	; 0x05
 aaa:	42 17       	cp	r20, r18
 aac:	53 07       	cpc	r21, r19
 aae:	44 f4       	brge	.+16     	; 0xac0 <fputc+0x38>
 ab0:	a0 81       	ld	r26, Z
 ab2:	b1 81       	ldd	r27, Z+1	; 0x01
 ab4:	9d 01       	movw	r18, r26
 ab6:	2f 5f       	subi	r18, 0xFF	; 255
 ab8:	3f 4f       	sbci	r19, 0xFF	; 255
 aba:	31 83       	std	Z+1, r19	; 0x01
 abc:	20 83       	st	Z, r18
 abe:	8c 93       	st	X, r24
 ac0:	26 81       	ldd	r18, Z+6	; 0x06
 ac2:	37 81       	ldd	r19, Z+7	; 0x07
 ac4:	2f 5f       	subi	r18, 0xFF	; 255
 ac6:	3f 4f       	sbci	r19, 0xFF	; 255
 ac8:	37 83       	std	Z+7, r19	; 0x07
 aca:	26 83       	std	Z+6, r18	; 0x06
 acc:	14 c0       	rjmp	.+40     	; 0xaf6 <fputc+0x6e>
 ace:	8b 01       	movw	r16, r22
 ad0:	ec 01       	movw	r28, r24
 ad2:	fb 01       	movw	r30, r22
 ad4:	00 84       	ldd	r0, Z+8	; 0x08
 ad6:	f1 85       	ldd	r31, Z+9	; 0x09
 ad8:	e0 2d       	mov	r30, r0
 ada:	09 95       	icall
 adc:	89 2b       	or	r24, r25
 ade:	e1 f6       	brne	.-72     	; 0xa98 <fputc+0x10>
 ae0:	d8 01       	movw	r26, r16
 ae2:	16 96       	adiw	r26, 0x06	; 6
 ae4:	8d 91       	ld	r24, X+
 ae6:	9c 91       	ld	r25, X
 ae8:	17 97       	sbiw	r26, 0x07	; 7
 aea:	01 96       	adiw	r24, 0x01	; 1
 aec:	17 96       	adiw	r26, 0x07	; 7
 aee:	9c 93       	st	X, r25
 af0:	8e 93       	st	-X, r24
 af2:	16 97       	sbiw	r26, 0x06	; 6
 af4:	ce 01       	movw	r24, r28
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	1f 91       	pop	r17
 afc:	0f 91       	pop	r16
 afe:	08 95       	ret

00000b00 <__ultoa_invert>:
 b00:	fa 01       	movw	r30, r20
 b02:	aa 27       	eor	r26, r26
 b04:	28 30       	cpi	r18, 0x08	; 8
 b06:	51 f1       	breq	.+84     	; 0xb5c <__ultoa_invert+0x5c>
 b08:	20 31       	cpi	r18, 0x10	; 16
 b0a:	81 f1       	breq	.+96     	; 0xb6c <__ultoa_invert+0x6c>
 b0c:	e8 94       	clt
 b0e:	6f 93       	push	r22
 b10:	6e 7f       	andi	r22, 0xFE	; 254
 b12:	6e 5f       	subi	r22, 0xFE	; 254
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	af 4f       	sbci	r26, 0xFF	; 255
 b1c:	b1 e0       	ldi	r27, 0x01	; 1
 b1e:	3e d0       	rcall	.+124    	; 0xb9c <__ultoa_invert+0x9c>
 b20:	b4 e0       	ldi	r27, 0x04	; 4
 b22:	3c d0       	rcall	.+120    	; 0xb9c <__ultoa_invert+0x9c>
 b24:	67 0f       	add	r22, r23
 b26:	78 1f       	adc	r23, r24
 b28:	89 1f       	adc	r24, r25
 b2a:	9a 1f       	adc	r25, r26
 b2c:	a1 1d       	adc	r26, r1
 b2e:	68 0f       	add	r22, r24
 b30:	79 1f       	adc	r23, r25
 b32:	8a 1f       	adc	r24, r26
 b34:	91 1d       	adc	r25, r1
 b36:	a1 1d       	adc	r26, r1
 b38:	6a 0f       	add	r22, r26
 b3a:	71 1d       	adc	r23, r1
 b3c:	81 1d       	adc	r24, r1
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	20 d0       	rcall	.+64     	; 0xb84 <__ultoa_invert+0x84>
 b44:	09 f4       	brne	.+2      	; 0xb48 <__ultoa_invert+0x48>
 b46:	68 94       	set
 b48:	3f 91       	pop	r19
 b4a:	2a e0       	ldi	r18, 0x0A	; 10
 b4c:	26 9f       	mul	r18, r22
 b4e:	11 24       	eor	r1, r1
 b50:	30 19       	sub	r19, r0
 b52:	30 5d       	subi	r19, 0xD0	; 208
 b54:	31 93       	st	Z+, r19
 b56:	de f6       	brtc	.-74     	; 0xb0e <__ultoa_invert+0xe>
 b58:	cf 01       	movw	r24, r30
 b5a:	08 95       	ret
 b5c:	46 2f       	mov	r20, r22
 b5e:	47 70       	andi	r20, 0x07	; 7
 b60:	40 5d       	subi	r20, 0xD0	; 208
 b62:	41 93       	st	Z+, r20
 b64:	b3 e0       	ldi	r27, 0x03	; 3
 b66:	0f d0       	rcall	.+30     	; 0xb86 <__ultoa_invert+0x86>
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__ultoa_invert+0x5c>
 b6a:	f6 cf       	rjmp	.-20     	; 0xb58 <__ultoa_invert+0x58>
 b6c:	46 2f       	mov	r20, r22
 b6e:	4f 70       	andi	r20, 0x0F	; 15
 b70:	40 5d       	subi	r20, 0xD0	; 208
 b72:	4a 33       	cpi	r20, 0x3A	; 58
 b74:	18 f0       	brcs	.+6      	; 0xb7c <__ultoa_invert+0x7c>
 b76:	49 5d       	subi	r20, 0xD9	; 217
 b78:	31 fd       	sbrc	r19, 1
 b7a:	40 52       	subi	r20, 0x20	; 32
 b7c:	41 93       	st	Z+, r20
 b7e:	02 d0       	rcall	.+4      	; 0xb84 <__ultoa_invert+0x84>
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__ultoa_invert+0x6c>
 b82:	ea cf       	rjmp	.-44     	; 0xb58 <__ultoa_invert+0x58>
 b84:	b4 e0       	ldi	r27, 0x04	; 4
 b86:	a6 95       	lsr	r26
 b88:	97 95       	ror	r25
 b8a:	87 95       	ror	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	ba 95       	dec	r27
 b92:	c9 f7       	brne	.-14     	; 0xb86 <__ultoa_invert+0x86>
 b94:	00 97       	sbiw	r24, 0x00	; 0
 b96:	61 05       	cpc	r22, r1
 b98:	71 05       	cpc	r23, r1
 b9a:	08 95       	ret
 b9c:	9b 01       	movw	r18, r22
 b9e:	ac 01       	movw	r20, r24
 ba0:	0a 2e       	mov	r0, r26
 ba2:	06 94       	lsr	r0
 ba4:	57 95       	ror	r21
 ba6:	47 95       	ror	r20
 ba8:	37 95       	ror	r19
 baa:	27 95       	ror	r18
 bac:	ba 95       	dec	r27
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__ultoa_invert+0xa2>
 bb0:	62 0f       	add	r22, r18
 bb2:	73 1f       	adc	r23, r19
 bb4:	84 1f       	adc	r24, r20
 bb6:	95 1f       	adc	r25, r21
 bb8:	a0 1d       	adc	r26, r0
 bba:	08 95       	ret

00000bbc <__prologue_saves__>:
 bbc:	2f 92       	push	r2
 bbe:	3f 92       	push	r3
 bc0:	4f 92       	push	r4
 bc2:	5f 92       	push	r5
 bc4:	6f 92       	push	r6
 bc6:	7f 92       	push	r7
 bc8:	8f 92       	push	r8
 bca:	9f 92       	push	r9
 bcc:	af 92       	push	r10
 bce:	bf 92       	push	r11
 bd0:	cf 92       	push	r12
 bd2:	df 92       	push	r13
 bd4:	ef 92       	push	r14
 bd6:	ff 92       	push	r15
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	cd b7       	in	r28, 0x3d	; 61
 be2:	de b7       	in	r29, 0x3e	; 62
 be4:	ca 1b       	sub	r28, r26
 be6:	db 0b       	sbc	r29, r27
 be8:	0f b6       	in	r0, 0x3f	; 63
 bea:	f8 94       	cli
 bec:	de bf       	out	0x3e, r29	; 62
 bee:	0f be       	out	0x3f, r0	; 63
 bf0:	cd bf       	out	0x3d, r28	; 61
 bf2:	09 94       	ijmp

00000bf4 <__epilogue_restores__>:
 bf4:	2a 88       	ldd	r2, Y+18	; 0x12
 bf6:	39 88       	ldd	r3, Y+17	; 0x11
 bf8:	48 88       	ldd	r4, Y+16	; 0x10
 bfa:	5f 84       	ldd	r5, Y+15	; 0x0f
 bfc:	6e 84       	ldd	r6, Y+14	; 0x0e
 bfe:	7d 84       	ldd	r7, Y+13	; 0x0d
 c00:	8c 84       	ldd	r8, Y+12	; 0x0c
 c02:	9b 84       	ldd	r9, Y+11	; 0x0b
 c04:	aa 84       	ldd	r10, Y+10	; 0x0a
 c06:	b9 84       	ldd	r11, Y+9	; 0x09
 c08:	c8 84       	ldd	r12, Y+8	; 0x08
 c0a:	df 80       	ldd	r13, Y+7	; 0x07
 c0c:	ee 80       	ldd	r14, Y+6	; 0x06
 c0e:	fd 80       	ldd	r15, Y+5	; 0x05
 c10:	0c 81       	ldd	r16, Y+4	; 0x04
 c12:	1b 81       	ldd	r17, Y+3	; 0x03
 c14:	aa 81       	ldd	r26, Y+2	; 0x02
 c16:	b9 81       	ldd	r27, Y+1	; 0x01
 c18:	ce 0f       	add	r28, r30
 c1a:	d1 1d       	adc	r29, r1
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	ed 01       	movw	r28, r26
 c28:	08 95       	ret

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>
