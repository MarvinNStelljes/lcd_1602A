   1               		.file	"lcd_1602A.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	toggle_LCD_EN
  12               	toggle_LCD_EN:
  13               	.LFB6:
  14               		.file 1 "lcd_1602A.c"
   1:lcd_1602A.c   **** //lcd_1602A.c
   2:lcd_1602A.c   **** 
   3:lcd_1602A.c   **** 
   4:lcd_1602A.c   **** 
   5:lcd_1602A.c   **** 
   6:lcd_1602A.c   **** 
   7:lcd_1602A.c   **** #include <util/delay.h>
   8:lcd_1602A.c   **** #include "lcd_1602A.h"
   9:lcd_1602A.c   **** 
  10:lcd_1602A.c   **** 
  11:lcd_1602A.c   **** 
  12:lcd_1602A.c   **** 
  13:lcd_1602A.c   **** /////-----void toggle_LCD_EN(void)-----/////
  14:lcd_1602A.c   **** /*Toggle the LCD enable pin to transmit or receive data. The data to tranceive have to be set on ou
  15:lcd_1602A.c   **** 
  16:lcd_1602A.c   **** void toggle_LCD_EN(volatile uint8_t *port, int lcd_enable_pin)
  17:lcd_1602A.c   **** 
  18:lcd_1602A.c   **** {
  15               		.loc 1 18 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 FF92      		push r15
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 15, -2
  22 0002 0F93      		push r16
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 16, -3
  26 0004 1F93      		push r17
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 17, -4
  30 0006 CF93      		push r28
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 28, -5
  34 0008 DF93      		push r29
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 29, -6
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 5 */
  41               	.L__stack_usage = 5
  42 000a EC01      		movw r28,r24
  43 000c 062F      		mov r16,r22
  44 000e F72E      		mov r15,r23
  19:lcd_1602A.c   **** 	clear_bits(port, 1, lcd_enable_pin);
  45               		.loc 1 19 0
  46 0010 7F93      		push r23
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 0012 6F93      		push r22
  50               	.LCFI6:
  51               		.cfi_def_cfa_offset 9
  52 0014 11E0      		ldi r17,lo8(1)
  53 0016 1F93      		push r17
  54               	.LCFI7:
  55               		.cfi_def_cfa_offset 10
  56 0018 DF93      		push r29
  57               	.LCFI8:
  58               		.cfi_def_cfa_offset 11
  59 001a 8F93      		push r24
  60               	.LCFI9:
  61               		.cfi_def_cfa_offset 12
  62 001c 0E94 0000 		call clear_bits
  63               	.LVL1:
  64               	.LBB10:
  65               	.LBB11:
  66               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  67               		.loc 2 276 0
  68 0020 85E0      		ldi r24,lo8(5)
  69 0022 8A95      	1:	dec r24
  70 0024 01F4      		brne 1b
  71 0026 0000      		nop
  72               	.LVL2:
  73               	.LBE11:
  74               	.LBE10:
  20:lcd_1602A.c   **** 	_delay_us (1);
  21:lcd_1602A.c   **** 	set_bits(port, 1, lcd_enable_pin);
  75               		.loc 1 21 0
  76 0028 FF92      		push r15
  77               	.LCFI10:
  78               		.cfi_def_cfa_offset 13
  79 002a 0F93      		push r16
  80               	.LCFI11:
  81               		.cfi_def_cfa_offset 14
  82 002c 1F93      		push r17
  83               	.LCFI12:
  84               		.cfi_def_cfa_offset 15
  85 002e DF93      		push r29
  86               	.LCFI13:
  87               		.cfi_def_cfa_offset 16
  88 0030 CF93      		push r28
  89               	.LCFI14:
  90               		.cfi_def_cfa_offset 17
  91 0032 0E94 0000 		call set_bits
  92               	.LVL3:
  93               	.LBB12:
  94               	.LBB13:
  95               		.loc 2 276 0
  96 0036 95E0      		ldi r25,lo8(5)
  97 0038 9A95      	1:	dec r25
  98 003a 01F4      		brne 1b
  99 003c 0000      		nop
 100               	.LVL4:
 101               	.LBE13:
 102               	.LBE12:
  22:lcd_1602A.c   **** 	_delay_us (1);
  23:lcd_1602A.c   **** 	clear_bits(port, 1, lcd_enable_pin);
 103               		.loc 1 23 0
 104 003e FF92      		push r15
 105               	.LCFI15:
 106               		.cfi_def_cfa_offset 18
 107 0040 0F93      		push r16
 108               	.LCFI16:
 109               		.cfi_def_cfa_offset 19
 110 0042 1F93      		push r17
 111               	.LCFI17:
 112               		.cfi_def_cfa_offset 20
 113 0044 DF93      		push r29
 114               	.LCFI18:
 115               		.cfi_def_cfa_offset 21
 116 0046 CF93      		push r28
 117               	.LCFI19:
 118               		.cfi_def_cfa_offset 22
 119 0048 0E94 0000 		call clear_bits
 120               	.LVL5:
  24:lcd_1602A.c   **** }
 121               		.loc 1 24 0
 122 004c 8DB7      		in r24,__SP_L__
 123 004e 9EB7      		in r25,__SP_H__
 124 0050 0F96      		adiw r24,15
 125 0052 0FB6      		in __tmp_reg__,__SREG__
 126 0054 F894      		cli
 127 0056 9EBF      		out __SP_H__,r25
 128 0058 0FBE      		out __SREG__,__tmp_reg__
 129 005a 8DBF      		out __SP_L__,r24
 130               	.LCFI20:
 131               		.cfi_def_cfa_offset 7
 132               	/* epilogue start */
 133 005c DF91      		pop r29
 134 005e CF91      		pop r28
 135               	.LVL6:
 136 0060 1F91      		pop r17
 137 0062 0F91      		pop r16
 138 0064 FF90      		pop r15
 139 0066 0895      		ret
 140               		.cfi_endproc
 141               	.LFE6:
 143               	.global	toggle_LCD_EN_test
 145               	toggle_LCD_EN_test:
 146               	.LFB7:
  25:lcd_1602A.c   **** 
  26:lcd_1602A.c   **** extern void toggle_LCD_EN_test(struct portpin *test) 
  27:lcd_1602A.c   **** 
  28:lcd_1602A.c   **** {
 147               		.loc 1 28 0
 148               		.cfi_startproc
 149               	.LVL7:
 150 0068 1F93      		push r17
 151               	.LCFI21:
 152               		.cfi_def_cfa_offset 3
 153               		.cfi_offset 17, -2
 154 006a CF93      		push r28
 155               	.LCFI22:
 156               		.cfi_def_cfa_offset 4
 157               		.cfi_offset 28, -3
 158 006c DF93      		push r29
 159               	.LCFI23:
 160               		.cfi_def_cfa_offset 5
 161               		.cfi_offset 29, -4
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 3 */
 165               	.L__stack_usage = 3
 166 006e EC01      		movw r28,r24
 167               	.LVL8:
 168               	.LBB14:
 169               	.LBB15:
 170               		.loc 2 276 0
 171 0070 85E0      		ldi r24,lo8(5)
 172 0072 8A95      	1:	dec r24
 173 0074 01F4      		brne 1b
 174               	.LVL9:
 175 0076 0000      		nop
 176               	.LVL10:
 177               	.LBE15:
 178               	.LBE14:
  29:lcd_1602A.c   **** 	//clear_bits(test.port, 1, test->pin);
  30:lcd_1602A.c   **** 	_delay_us (1);
  31:lcd_1602A.c   **** 	set_bits(test->port, 1, test->pin);
 179               		.loc 1 31 0
 180 0078 8A81      		ldd r24,Y+2
 181 007a 1F92      		push __zero_reg__
 182               	.LCFI24:
 183               		.cfi_def_cfa_offset 6
 184 007c 8F93      		push r24
 185               	.LCFI25:
 186               		.cfi_def_cfa_offset 7
 187 007e 11E0      		ldi r17,lo8(1)
 188 0080 1F93      		push r17
 189               	.LCFI26:
 190               		.cfi_def_cfa_offset 8
 191 0082 8981      		ldd r24,Y+1
 192 0084 8F93      		push r24
 193               	.LCFI27:
 194               		.cfi_def_cfa_offset 9
 195 0086 8881      		ld r24,Y
 196 0088 8F93      		push r24
 197               	.LCFI28:
 198               		.cfi_def_cfa_offset 10
 199 008a 0E94 0000 		call set_bits
 200               	.LVL11:
 201               	.LBB16:
 202               	.LBB17:
 203               		.loc 2 276 0
 204 008e 95E0      		ldi r25,lo8(5)
 205 0090 9A95      	1:	dec r25
 206 0092 01F4      		brne 1b
 207 0094 0000      		nop
 208               	.LVL12:
 209               	.LBE17:
 210               	.LBE16:
  32:lcd_1602A.c   **** 	_delay_us (1);
  33:lcd_1602A.c   **** 	clear_bits(test->port, 1, test->pin);
 211               		.loc 1 33 0
 212 0096 8A81      		ldd r24,Y+2
 213 0098 1F92      		push __zero_reg__
 214               	.LCFI29:
 215               		.cfi_def_cfa_offset 11
 216 009a 8F93      		push r24
 217               	.LCFI30:
 218               		.cfi_def_cfa_offset 12
 219 009c 1F93      		push r17
 220               	.LCFI31:
 221               		.cfi_def_cfa_offset 13
 222 009e 8981      		ldd r24,Y+1
 223 00a0 8F93      		push r24
 224               	.LCFI32:
 225               		.cfi_def_cfa_offset 14
 226 00a2 8881      		ld r24,Y
 227 00a4 8F93      		push r24
 228               	.LCFI33:
 229               		.cfi_def_cfa_offset 15
 230 00a6 0E94 0000 		call clear_bits
 231               	.LVL13:
  34:lcd_1602A.c   **** 
  35:lcd_1602A.c   **** }
 232               		.loc 1 35 0
 233 00aa 8DB7      		in r24,__SP_L__
 234 00ac 9EB7      		in r25,__SP_H__
 235 00ae 0A96      		adiw r24,10
 236 00b0 0FB6      		in __tmp_reg__,__SREG__
 237 00b2 F894      		cli
 238 00b4 9EBF      		out __SP_H__,r25
 239 00b6 0FBE      		out __SREG__,__tmp_reg__
 240 00b8 8DBF      		out __SP_L__,r24
 241               	.LCFI34:
 242               		.cfi_def_cfa_offset 5
 243               	/* epilogue start */
 244 00ba DF91      		pop r29
 245 00bc CF91      		pop r28
 246               	.LVL14:
 247 00be 1F91      		pop r17
 248 00c0 0895      		ret
 249               		.cfi_endproc
 250               	.LFE7:
 252               		.comm	LCD_EN_test,3,1
 253               	.Letext0:
 254               		.file 3 "/usr/lib/avr/include/stdint.h"
 255               		.file 4 "atmel_io_control.h"
 256               		.file 5 "atmel_pin_config.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd_1602A.c
     /tmp/cc8xewI9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8xewI9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8xewI9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8xewI9.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8xewI9.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8xewI9.s:12     .text:0000000000000000 toggle_LCD_EN
     /tmp/cc8xewI9.s:145    .text:0000000000000068 toggle_LCD_EN_test
                            *COM*:0000000000000003 LCD_EN_test

UNDEFINED SYMBOLS
clear_bits
set_bits
__do_clear_bss
