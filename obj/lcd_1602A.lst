   1               		.file	"lcd_1602A.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	get_lcd_busy_flag
  12               	get_lcd_busy_flag:
  13               	.LFB6:
  14               		.file 1 "lcd_1602A.c"
   1:lcd_1602A.c   **** //lcd_1602A.c
   2:lcd_1602A.c   **** 
   3:lcd_1602A.c   **** 
   4:lcd_1602A.c   **** 
   5:lcd_1602A.c   **** 
   6:lcd_1602A.c   **** 
   7:lcd_1602A.c   **** #include "main.h"
   8:lcd_1602A.c   **** #include "lcd_1602A.h"
   9:lcd_1602A.c   **** #include <avr/io.h> 
  10:lcd_1602A.c   **** #include <util/delay.h>
  11:lcd_1602A.c   **** 
  12:lcd_1602A.c   **** 
  13:lcd_1602A.c   **** 
  14:lcd_1602A.c   **** int get_lcd_busy_flag(void)
  15:lcd_1602A.c   **** {
  15               		.loc 1 15 0
  16               		.cfi_startproc
  17 0000 CF93      		push r28
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 28, -2
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 1 */
  24               	.L__stack_usage = 1
  25               	.LVL0:
  16:lcd_1602A.c   **** 	// TODO: add address counter
  17:lcd_1602A.c   **** 
  18:lcd_1602A.c   **** 	uint8_t input_buffer = 0;
  19:lcd_1602A.c   **** 	
  20:lcd_1602A.c   **** 	DDRD &= ~( (1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));	// Set LCD Port Pins as
  26               		.loc 1 20 0
  27 0002 8AB1      		in r24,0xa
  28 0004 8F70      		andi r24,lo8(15)
  29 0006 8AB9      		out 0xa,r24
  21:lcd_1602A.c   **** 		
  22:lcd_1602A.c   **** 	clear_bits(&RS_PORT, 1, RS_PIN);
  30               		.loc 1 22 0
  31 0008 42E0      		ldi r20,lo8(2)
  32 000a 50E0      		ldi r21,0
  33 000c 61E0      		ldi r22,lo8(1)
  34 000e 70E0      		ldi r23,0
  35 0010 8BE2      		ldi r24,lo8(43)
  36 0012 90E0      		ldi r25,0
  37 0014 0E94 0000 		call clear_bits
  38               	.LVL1:
  23:lcd_1602A.c   **** 	set_bits(&RW_PORT, 1, RW_PIN); 
  39               		.loc 1 23 0
  40 0018 43E0      		ldi r20,lo8(3)
  41 001a 50E0      		ldi r21,0
  42 001c 61E0      		ldi r22,lo8(1)
  43 001e 70E0      		ldi r23,0
  44 0020 8BE2      		ldi r24,lo8(43)
  45 0022 90E0      		ldi r25,0
  46 0024 0E94 0000 		call set_bits
  47               	.LVL2:
  48               	.LBB14:
  49               	.LBB15:
  50               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  51               		.loc 2 187 0
  52 0028 8FE9      		ldi r24,lo8(3999)
  53 002a 9FE0      		ldi r25,hi8(3999)
  54 002c 0197      	1:	sbiw r24,1
  55 002e 01F4      		brne 1b
  56 0030 00C0      		rjmp .
  57 0032 0000      		nop
  58               	.LVL3:
  59               	.LBE15:
  60               	.LBE14:
  24:lcd_1602A.c   **** 	_delay_ms (1);
  25:lcd_1602A.c   **** 	set_bits(&PORTB, 1, LCD_EN);
  61               		.loc 1 25 0
  62 0034 44E0      		ldi r20,lo8(4)
  63 0036 50E0      		ldi r21,0
  64 0038 61E0      		ldi r22,lo8(1)
  65 003a 70E0      		ldi r23,0
  66 003c 85E2      		ldi r24,lo8(37)
  67 003e 90E0      		ldi r25,0
  68 0040 0E94 0000 		call set_bits
  69               	.LVL4:
  70               	.LBB16:
  71               	.LBB17:
  72               		.loc 2 187 0
  73 0044 8FE9      		ldi r24,lo8(3999)
  74 0046 9FE0      		ldi r25,hi8(3999)
  75 0048 0197      	1:	sbiw r24,1
  76 004a 01F4      		brne 1b
  77 004c 00C0      		rjmp .
  78 004e 0000      		nop
  79               	.LVL5:
  80               	.LBE17:
  81               	.LBE16:
  26:lcd_1602A.c   **** 	_delay_ms (1);
  27:lcd_1602A.c   **** 		
  28:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
  82               		.loc 1 28 0
  83 0050 4F9B      		sbis 0x9,7
  84 0052 00C0      		rjmp .L10
  29:lcd_1602A.c   **** 		input_buffer |= (1 << 7);
  85               		.loc 1 29 0
  86 0054 C0E8      		ldi r28,lo8(-128)
  87 0056 00C0      		rjmp .L2
  88               	.L10:
  18:lcd_1602A.c   **** 	
  89               		.loc 1 18 0
  90 0058 C0E0      		ldi r28,0
  91               	.L2:
  92               	.LVL6:
  30:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D6)) != 0)
  93               		.loc 1 30 0
  94 005a 4E99      		sbic 0x9,6
  31:lcd_1602A.c   **** 		input_buffer |= (1 << 6);
  95               		.loc 1 31 0
  96 005c C064      		ori r28,lo8(64)
  97               	.LVL7:
  98               	.L3:
  32:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D5)) != 0)
  99               		.loc 1 32 0
 100 005e 4D99      		sbic 0x9,5
  33:lcd_1602A.c   **** 		input_buffer |= (1 << 5);
 101               		.loc 1 33 0
 102 0060 C062      		ori r28,lo8(32)
 103               	.LVL8:
 104               	.L4:
  34:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D4)) != 0)
 105               		.loc 1 34 0
 106 0062 4C99      		sbic 0x9,4
  35:lcd_1602A.c   **** 		input_buffer |= (1 << 4);
 107               		.loc 1 35 0
 108 0064 C061      		ori r28,lo8(16)
 109               	.LVL9:
 110               	.L5:
 111               	.LBB18:
 112               	.LBB19:
 113               		.loc 2 187 0
 114 0066 8FE9      		ldi r24,lo8(3999)
 115 0068 9FE0      		ldi r25,hi8(3999)
 116 006a 0197      	1:	sbiw r24,1
 117 006c 01F4      		brne 1b
 118 006e 00C0      		rjmp .
 119 0070 0000      		nop
 120               	.LVL10:
 121               	.LBE19:
 122               	.LBE18:
  36:lcd_1602A.c   **** 		
  37:lcd_1602A.c   **** 		_delay_ms (1);
  38:lcd_1602A.c   **** 	clear_bits(&PORTB, 1, LCD_EN);
 123               		.loc 1 38 0
 124 0072 44E0      		ldi r20,lo8(4)
 125 0074 50E0      		ldi r21,0
 126 0076 61E0      		ldi r22,lo8(1)
 127 0078 70E0      		ldi r23,0
 128 007a 85E2      		ldi r24,lo8(37)
 129 007c 90E0      		ldi r25,0
 130 007e 0E94 0000 		call clear_bits
 131               	.LVL11:
 132               	.LBB20:
 133               	.LBB21:
 134               		.loc 2 187 0
 135 0082 8FE9      		ldi r24,lo8(3999)
 136 0084 9FE0      		ldi r25,hi8(3999)
 137 0086 0197      	1:	sbiw r24,1
 138 0088 01F4      		brne 1b
 139 008a 00C0      		rjmp .
 140 008c 0000      		nop
 141               	.LVL12:
 142               	.LBE21:
 143               	.LBE20:
  39:lcd_1602A.c   ****    _delay_ms (1);
  40:lcd_1602A.c   **** 	set_bits(&PORTB, 1, LCD_EN);
 144               		.loc 1 40 0
 145 008e 44E0      		ldi r20,lo8(4)
 146 0090 50E0      		ldi r21,0
 147 0092 61E0      		ldi r22,lo8(1)
 148 0094 70E0      		ldi r23,0
 149 0096 85E2      		ldi r24,lo8(37)
 150 0098 90E0      		ldi r25,0
 151 009a 0E94 0000 		call set_bits
 152               	.LVL13:
 153               	.LBB22:
 154               	.LBB23:
 155               		.loc 2 187 0
 156 009e 8FE9      		ldi r24,lo8(3999)
 157 00a0 9FE0      		ldi r25,hi8(3999)
 158 00a2 0197      	1:	sbiw r24,1
 159 00a4 01F4      		brne 1b
 160 00a6 00C0      		rjmp .
 161 00a8 0000      		nop
 162               	.LVL14:
 163               	.LBE23:
 164               	.LBE22:
  41:lcd_1602A.c   **** 	_delay_ms (1);
  42:lcd_1602A.c   **** 	
  43:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D7)) != 0)
 165               		.loc 1 43 0
 166 00aa 4F99      		sbic 0x9,7
  44:lcd_1602A.c   **** 		input_buffer |= (1 << 3);
 167               		.loc 1 44 0
 168 00ac C860      		ori r28,lo8(8)
 169               	.LVL15:
 170               	.L6:
  45:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D6)) != 0)
 171               		.loc 1 45 0
 172 00ae 4E99      		sbic 0x9,6
  46:lcd_1602A.c   **** 		input_buffer |= (1 << 2);
 173               		.loc 1 46 0
 174 00b0 C460      		ori r28,lo8(4)
 175               	.LVL16:
 176               	.L7:
  47:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D5)) != 0)
 177               		.loc 1 47 0
 178 00b2 4D99      		sbic 0x9,5
  48:lcd_1602A.c   **** 		input_buffer |= (1 << 1);
 179               		.loc 1 48 0
 180 00b4 C260      		ori r28,lo8(2)
 181               	.LVL17:
 182               	.L8:
  49:lcd_1602A.c   **** 	if ((LCD_DATA_IN & (1 << LCD_D4)) != 0)
 183               		.loc 1 49 0
 184 00b6 4C99      		sbic 0x9,4
  50:lcd_1602A.c   **** 		input_buffer |= (1 << 0);
 185               		.loc 1 50 0
 186 00b8 C160      		ori r28,lo8(1)
 187               	.LVL18:
 188               	.L9:
  51:lcd_1602A.c   **** 	
  52:lcd_1602A.c   **** 	clear_bits(&PORTB, 1, LCD_EN);
 189               		.loc 1 52 0
 190 00ba 44E0      		ldi r20,lo8(4)
 191 00bc 50E0      		ldi r21,0
 192 00be 61E0      		ldi r22,lo8(1)
 193 00c0 70E0      		ldi r23,0
 194 00c2 85E2      		ldi r24,lo8(37)
 195 00c4 90E0      		ldi r25,0
 196 00c6 0E94 0000 		call clear_bits
 197               	.LVL19:
  53:lcd_1602A.c   **** 	
  54:lcd_1602A.c   **** 	clear_bits(&RW_PORT, 1, RW_PIN);
 198               		.loc 1 54 0
 199 00ca 43E0      		ldi r20,lo8(3)
 200 00cc 50E0      		ldi r21,0
 201 00ce 61E0      		ldi r22,lo8(1)
 202 00d0 70E0      		ldi r23,0
 203 00d2 8BE2      		ldi r24,lo8(43)
 204 00d4 90E0      		ldi r25,0
 205 00d6 0E94 0000 		call clear_bits
 206               	.LVL20:
  55:lcd_1602A.c   **** 	
  56:lcd_1602A.c   **** 	DDRD |= ((1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4));	// Set LCD Port Pins as O
 207               		.loc 1 56 0
 208 00da 8AB1      		in r24,0xa
 209 00dc 806F      		ori r24,lo8(-16)
 210 00de 8AB9      		out 0xa,r24
  57:lcd_1602A.c   **** 
  58:lcd_1602A.c   **** 
  59:lcd_1602A.c   **** 	return ( input_buffer & 0b10000000);
 211               		.loc 1 59 0
 212 00e0 8C2F      		mov r24,r28
 213 00e2 8078      		andi r24,lo8(-128)
  60:lcd_1602A.c   **** }
 214               		.loc 1 60 0
 215 00e4 90E0      		ldi r25,0
 216               	/* epilogue start */
 217 00e6 CF91      		pop r28
 218               	.LVL21:
 219 00e8 0895      		ret
 220               		.cfi_endproc
 221               	.LFE6:
 223               	.global	toggle_LCD_EN
 225               	toggle_LCD_EN:
 226               	.LFB7:
  61:lcd_1602A.c   **** 
  62:lcd_1602A.c   **** 
  63:lcd_1602A.c   **** /////-----void toggle_LCD_EN(void)-----/////
  64:lcd_1602A.c   **** /*Toggle the LCD enable pin to transmit or receive data. The data to tranceive have to be set on ou
  65:lcd_1602A.c   **** 
  66:lcd_1602A.c   **** void toggle_LCD_EN(void)
  67:lcd_1602A.c   **** {
 227               		.loc 1 67 0
 228               		.cfi_startproc
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 231               	/* stack size = 0 */
 232               	.L__stack_usage = 0
  68:lcd_1602A.c   **** 	set_bits(&LCD_EN_PORT, 1, LCD_EN);
 233               		.loc 1 68 0
 234 00ea 44E0      		ldi r20,lo8(4)
 235 00ec 50E0      		ldi r21,0
 236 00ee 61E0      		ldi r22,lo8(1)
 237 00f0 70E0      		ldi r23,0
 238 00f2 85E2      		ldi r24,lo8(37)
 239 00f4 90E0      		ldi r25,0
 240 00f6 0E94 0000 		call set_bits
 241               	.LVL22:
 242               	.LBB24:
 243               	.LBB25:
 244               		.loc 2 187 0
 245 00fa 8FE9      		ldi r24,lo8(3999)
 246 00fc 9FE0      		ldi r25,hi8(3999)
 247 00fe 0197      	1:	sbiw r24,1
 248 0100 01F4      		brne 1b
 249 0102 00C0      		rjmp .
 250 0104 0000      		nop
 251               	.LVL23:
 252               	.LBE25:
 253               	.LBE24:
  69:lcd_1602A.c   **** 	_delay_ms (1);
  70:lcd_1602A.c   **** 	clear_bits(&LCD_EN_PORT, 1, LCD_EN);
 254               		.loc 1 70 0
 255 0106 44E0      		ldi r20,lo8(4)
 256 0108 50E0      		ldi r21,0
 257 010a 61E0      		ldi r22,lo8(1)
 258 010c 70E0      		ldi r23,0
 259 010e 85E2      		ldi r24,lo8(37)
 260 0110 90E0      		ldi r25,0
 261 0112 0C94 0000 		jmp clear_bits
 262               	.LVL24:
 263               		.cfi_endproc
 264               	.LFE7:
 266               	.Letext0:
 267               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd_1602A.c
     /tmp/ccss04CD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccss04CD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccss04CD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccss04CD.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccss04CD.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccss04CD.s:12     .text:0000000000000000 get_lcd_busy_flag
     /tmp/ccss04CD.s:225    .text:00000000000000ea toggle_LCD_EN

UNDEFINED SYMBOLS
clear_bits
set_bits
